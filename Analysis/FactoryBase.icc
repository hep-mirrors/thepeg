// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the FactoryBase class.
//

namespace ThePEG {

inline FactoryBase::FactoryBase()
  : theFilename(""), theSuffix("aida"), theStoreType("xml"),
    theAnalysisFactory(0), theTree(0), theHistogramFactory(0),
    theDataSetFactory(0) {}

inline FactoryBase::FactoryBase(const FactoryBase & x)
  : Interfaced(x), theFilename(x.theFilename), theSuffix(x.theSuffix),
    theStoreType(x.theStoreType), theAnalysisFactory(0), theTree(0),
    theHistogramFactory(0), theDataSetFactory(0) {}

inline string FactoryBase::filename() const {
  return theFilename;
}

inline string FactoryBase::suffix() const {
  return theSuffix;
}

inline string FactoryBase::storeType() const {
  return theStoreType;
}

inline AIDA::IAnalysisFactory & FactoryBase::analysisFactory() const {
  return *theAnalysisFactory;
}

inline void FactoryBase::analysisFactory(AIDA::IAnalysisFactory * x) {
  theAnalysisFactory = x;
}

inline AIDA::ITree & FactoryBase::tree() const {
  return *theTree;
}

inline AIDA::IHistogramFactory & FactoryBase::histogramFactory() const {
  return *theHistogramFactory;
}

inline AIDA::IDataPointSetFactory & FactoryBase::dataSetFactory() const {
  return *theDataSetFactory;
}

inline void FactoryBase::mkdir(string path) {
  tree().mkdir(path);
}

inline void FactoryBase::mkdirs(string path) {
  tree().mkdirs(path);
}

inline void FactoryBase::cd(string path) {
  tree().cd(path);
}

inline FactoryBase::tH1DPtr
FactoryBase::createHistogram1D(string path, int nb, double lo, double up) {
  return histogramFactory().createHistogram1D(path, nb, lo, up);
}

inline FactoryBase::tH1DPtr
FactoryBase::
createHistogram1D(string path, string title, int nb, double lo, double up) {
  return histogramFactory().createHistogram1D(path, title, nb, lo, up);
}

inline FactoryBase::tH1DPtr
FactoryBase::
createHistogram1D(string path, string title,
		  const std::vector<double> & edges) {
  return histogramFactory().createHistogram1D(path, title, edges);
}

inline void FactoryBase::registerClient(tIPtr client) {
  initrun();
  clients.insert(client);
}

inline FactoryBase::DataFiller::DataFiller(AIDA::IDataPointSet * dps)
  : dset(dps) {}

inline FactoryBase::DataFiller::DataFiller(const DataFiller & df)
  : dset(df.dset) {}

inline FactoryBase::DataFiller::~DataFiller() {
  int N = v.size()/(3*dset->dimension());
  for ( int i = 0; i < N; ++i ) {
    AIDA::IDataPoint * p = dset->addPoint();
    for ( int j = 0; j < p->dimension(); ++j ) {
      p->coordinate(j)->setValue(v.front());
      v.pop_front();
      p->coordinate(j)->setErrorPlus(v.front());
      v.pop_front();
      p->coordinate(j)->setErrorMinus(v.front());
      v.pop_front();
    }
  }
}

inline FactoryBase::DataFiller & FactoryBase::DataFiller::operator<<(double x) {
  v.push_back(x);
  return *this;
}

inline FactoryBase::DataFiller::operator AIDA::IDataPointSet * () {
  return dset;
}

inline FactoryBase::DataFiller
FactoryBase::createDataSet(string path, string title, int dim) {
  return DataFiller(dataSetFactory().create(path, title, dim));
}

}
