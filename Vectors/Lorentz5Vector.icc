// -*- C++ -*-
// These are the definitions of the inlined member functions in the
// Lorentz5Vector class.

namespace ThePEG {

template <typename Value>
inline Lorentz5Vector<Value>::
Lorentz5Vector() : mm(Value()) {}

template <typename Value>
inline Lorentz5Vector<Value>::
Lorentz5Vector(Value m)
  : LorentzVector<Value>(Value(), Value(), Value(), m), mm(m) {}

template <typename Value>
inline Lorentz5Vector<Value>::
Lorentz5Vector(Value x, Value y, Value z, Value t)
  : LorentzVector<Value>(x, y, z, t) {
  rescaleMass();
}

template <typename Value>
inline Lorentz5Vector<Value>::
Lorentz5Vector(Value x, Value y, Value z,
	       Value t, Value m)
  : LorentzVector<Value>(x, y, z, t), mm(m) {}

template <typename Value>
inline Lorentz5Vector<Value>::Lorentz5Vector(const Vector3<Value> & p, Value e)
  : LorentzVector<Value>(p, e) {
  rescaleMass();
}

template <typename Value>
inline Lorentz5Vector<Value>::Lorentz5Vector(Value m, const Vector3<Value> & p)
  : LorentzVector<Value>(p, sqrt(p.mag2() + m*m)), mm(m) {}

template <typename Value>
inline Lorentz5Vector<Value>::
Lorentz5Vector(const Vector3<Value> & p, Value t, Value m)
  : LorentzVector<Value>(p, t), mm(m) {}

template <typename Value>
inline Lorentz5Vector<Value>::Lorentz5Vector(const LorentzVector<Value> & p)
  : LorentzVector<Value>(p) {
  rescaleMass();
}

template <typename Value>
inline Lorentz5Vector<Value>::
Lorentz5Vector(const LorentzVector<Value> & p, Value m)
  : LorentzVector<Value>(p), mm(m) {}

template <typename Value>
inline void Lorentz5Vector<Value>::rescaleEnergy() {
  LorentzVector<Value>::
    setT(sqrt(LorentzVector<Value>::vect().mag2() + mass2()));
}

template <typename Value>
inline void Lorentz5Vector<Value>::rescaleRho() {
  LorentzVector<Value>::setRho(sqrt(t()*t() - mass2()));
}

template <typename Value>
inline void Lorentz5Vector<Value>::rescaleMass() {
  mm = LorentzVector<Value>::mag();
}

template <typename Value>
inline void Lorentz5Vector<Value>::setTau(Value a) {
  mm = a;
}

template <typename Value>
inline void Lorentz5Vector<Value>::setMass(Value a) {
  setTau(a);
}

template <typename Value>
inline Lorentz5Vector<Value> &
Lorentz5Vector<Value>::operator=(const LorentzVector<Value> & q) {
  LorentzVector<Value>::operator=(q);
  return *this;
}

template <typename Value>
inline typename Lorentz5Vector<Value>::Value2
Lorentz5Vector<Value>::mass2() const {
  return mm > Value() ? mm*mm: -mm*mm;
}

template <typename Value>
inline Value Lorentz5Vector<Value>::mass() const {
  return mm;
}

template <typename Value>
inline typename Lorentz5Vector<Value>::Value2
Lorentz5Vector<Value>::tau2() const { return mass2(); }

template <typename Value>
inline Value Lorentz5Vector<Value>::tau() const { return mass(); }

template <typename Value>
inline double Lorentz5Vector<Value>::massError() const {
  return sqrt(abs(Math::relativeError(mass2(), LorentzVector<Value>::mag2())));
}

template <typename Value>
inline double Lorentz5Vector<Value>::energyError() const {
  return sqrt(abs(Math::relativeError(t()*t(), mass2() 
				      + LorentzVector<Value>::vect().mag2())));
}

template <typename Value>
inline double Lorentz5Vector<Value>::rhoError() const {
  return sqrt(abs(Math::relativeError(LorentzVector<Value>::vect().mag2(), 
				      t()*t() - mass2())));
}

template <typename Value>
inline Value Lorentz5Vector<Value>::dirPlus() const {
  return Direction<0>::pos() ? 
    LorentzVector<Value>::plus()
    : 
    LorentzVector<Value>::minus();
}

template <typename Value>
inline Value Lorentz5Vector<Value>::dirMinus() const {
  return Direction<0>::neg() ? 
    LorentzVector<Value>::plus() 
    : 
    LorentzVector<Value>::minus();
}

template <typename Value>
inline Lorentz5Vector<Value> &
Lorentz5Vector<Value>::transform(const LorentzRotation & r)
{
  LorentzVector<Value>::transform(r.one());
  return *this;
}
}

