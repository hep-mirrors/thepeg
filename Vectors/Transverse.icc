// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the Transverse class.
//

namespace ThePEG {

template <typename Value>
inline Transverse<Value>::Transverse()
  : BasePair(Value(), Value()) {}

template <typename Value>
inline Transverse<Value>::Transverse(const Transverse & pt)
  : BasePair(pt) {}

template <typename Value>
inline Transverse<Value>::Transverse(const BasePair & p)
  : BasePair(p) {}

template <typename Value>
inline Transverse<Value>::Transverse(Value xx, Value yy)
  : BasePair(xx, yy) {}

template <typename Value>
inline Transverse<Value>::Transverse(const Vector3<Value> & p)
  : BasePair(p.x(), p.y()) {}

template <typename Value>
inline Transverse<Value>::Transverse(const LorentzVector<Value> & p)
  : BasePair(p.x(), p.y()) {}

template <typename Value>
inline Transverse<Value>::Transverse(const Lorentz5Vector<Value> & p)
  : BasePair(p.x(), p.y()) {}

template <typename Value>
inline const Transverse<Value> & Transverse<Value>::
operator=(const Transverse & pt) {
  BasePair::operator=(pt);
  return *this;
}

template <typename Value>
inline const Transverse<Value> & Transverse<Value>::
operator=(const BasePair & p) {
  BasePair::operator=(p);
  return *this;
}

template <typename Value>
inline const Transverse<Value> & Transverse<Value>::
operator=(const Vector3<Value> & p) {
  BasePair::operator=(BasePair(p.x(), p.y()));
  return *this;
}

template <typename Value>
inline const Transverse<Value> & Transverse<Value>::
operator=(const LorentzVector<Value> & p) {
  BasePair::operator=(BasePair(p.x(), p.y()));
  return *this;
}

template <typename Value>
inline const Transverse<Value> & Transverse<Value>::
operator=(const Lorentz5Vector<Value> & p) {
  BasePair::operator=(BasePair(p.x(), p.y()));
  return *this;
}

template <typename Value>
inline Value Transverse<Value>::x() const {
  return BasePair::first;
}

template <typename Value>
inline Value Transverse<Value>::y() const {
  return BasePair::second;
}

template <typename Value>
inline Transverse<Value> Transverse<Value>::operator-() const {
  return Transverse(-x(), -y());
}

template <typename Value>
inline Transverse<Value> Transverse<Value>::
operator-(const Transverse & pt) const {
  return Transverse(x() - pt.x(), y() - pt.y());
}

template <typename Value>
inline Transverse<Value> & Transverse<Value>::
operator-=(const Transverse & pt) {
  BasePair::first -= pt.x();
  BasePair::second -= pt.y();
  return *this;
}

template <typename Value>
inline Transverse<Value> Transverse<Value>::
operator+(const Transverse & pt) const {
  return Transverse(x() + pt.x(), y() + pt.y());
}

template <typename Value>
inline Transverse<Value> & Transverse<Value>::
operator+=(const Transverse & pt) {
  BasePair::first += pt.x();
  BasePair::second += pt.y();
  return *this;
}

template <typename Value>
inline typename Transverse<Value>::Value2
Transverse<Value>::pt2() const {
  return sqr(x()) + sqr(y());
}

template <typename Value>
inline Value Transverse<Value>::pt() const {
  return sqrt(pt2());
}

template <typename Value>
inline double Transverse<Value>::phi() const {
  return atan2(y(), x());
}

}

