// -*- C++ -*-
//
// Collision.icc is a part of ThePEG - Toolkit for HEP Event Generation
// Copyright (C) 1999-2007 Leif Lonnblad
//
// ThePEG is licenced under version 2 of the GPL, see COPYING for details.
// Please respect the MCnet academic guidelines, see GUIDELINES for details.
//
//
// This is the implementation of the inlined member functions of
// the Collision class.
//
#include "Step.h"
#include "Event.h"
#include "SubProcess.h"

namespace ThePEG {

inline void * Collision::operator new(size_t) {
  return FixedAllocator<Collision>::allocate();
}

inline void Collision::operator delete(void * p, size_t) {
  FixedAllocator<Collision>::deallocate(p);
}

inline Collision::Collision() {}

inline tcEventBasePtr Collision::handler() const {
  return theHandler;
}

inline tEventPtr Collision::event() const {
  return theEvent;
}

template <class OutputIterator>
inline void Collision::selectFinalState(OutputIterator r) const {
  select(r, SelectFinalState());
}

inline tPVector Collision::getFinalState() const {
  tPVector ret;
  selectFinalState(back_inserter(ret));
  return ret;
}

inline tSubProPtr Collision::primarySubProcess() const {
  return subProcesses().empty()? SubProPtr(): subProcesses().front();
}

inline const SubProcessVector & Collision::subProcesses() const {
  return theSubProcesses;
}

inline tcStepPtr Collision::finalStep() const {
  return steps().empty()? tcStepPtr(): tcStepPtr(steps().back());
}

inline tStepPtr Collision::finalStep() {
  return steps().empty()? StepPtr(): steps().back();
}

inline const StepVector & Collision::steps() const {
  return theSteps;
}

inline tcStepPtr Collision::step(unsigned int i) const {
  return i < steps().size()? tcStepPtr(theSteps[i]): tcStepPtr();
}

inline const PPair & Collision::incoming() const {
  return theIncoming;
}

inline const LorentzPoint & Collision::vertex() const {
  return theVertex;
}

inline void Collision::vertex(const LorentzPoint & v) {
  theVertex = v;
}

inline const ParticleSet & Collision::all() const {
  return allParticles;
}

inline Energy2 Collision::m2() const {
  return ( incoming().first->momentum() + incoming().second->momentum() ).m2();
}

inline bool Collision::isRemnant(tPPtr p) const {
  return member(getRemnants(), p);
}

}
