// -*- C++ -*-
//
// SubProcess.icc is a part of ThePEG - Toolkit for HEP Event Generation
// Copyright (C) 1999-2007 Leif Lonnblad
//
// ThePEG is licenced under version 2 of the GPL, see COPYING for details.
// Please respect the MCnet academic guidelines, see GUIDELINES for details.
//
//
// This is the implementation of the inlined member functions of
// the SubProcess class.
//

// -*- C++ -*-
//
// SubProcess.icc is a part of ThePEG - Toolkit for HEP Event Generation
// Copyright (C) 1999-2007 Leif Lonnblad
//
// ThePEG is licenced under version 2 of the GPL, see COPYING for details.
// Please respect the MCnet academic guidelines, see GUIDELINES for details.
//

namespace ThePEG {

inline SubProcess::SubProcess()
  : isDecayed(false) {}

inline SubProcess::~SubProcess() {}

inline tcEventBasePtr SubProcess::handler() const {
  return theHandler;
}

inline tCollPtr SubProcess::collision() const {
  return theCollision;
}

inline const PPair & SubProcess::incoming() const {
  return theIncoming;
}

inline const ParticleVector & SubProcess::intermediates() const {
  return theIntermediates;
}

inline const ParticleVector & SubProcess::outgoing() const {
  return theOutgoing;
}

inline Energy2 SubProcess::shat() const {
  return (incoming().first->momentum() + incoming().second->momentum()).m2();
}

inline Energy2 SubProcess::that() const {
  return (incoming().first->momentum() - outgoing()[0]->momentum()).m2();
}

inline Energy2 SubProcess::uhat() const {
  return (incoming().second->momentum() - outgoing()[0]->momentum()).m2();
}

inline bool SubProcess::decayed() const {
  return isDecayed;
}

inline void SubProcess::decayed(bool x) {
  isDecayed = x;
}

}
