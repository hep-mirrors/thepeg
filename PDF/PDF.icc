// -*- C++ -*-
//
// PDF.icc is a part of ThePEG - Toolkit for HEP Event Generation
// Copyright (C) 1999-2007 Leif Lonnblad
//
// ThePEG is licenced under version 2 of the GPL, see COPYING for details.
// Please respect the MCnet academic guidelines, see GUIDELINES for details.
//
//
// This is the implementation of the inlined member functions of
// the PDF class.
//

namespace ThePEG {

inline PDF::PDF() {}

inline PDF::PDF(tcPBIPtr pb) {
  if ( !pb ) return;
  thePDF = pb->pdf();
  theParticle = pb->particleData();
}

inline PDF::PDF(tcPDFPtr pdf, tcPDPtr pd)
  : thePDF(pdf), theParticle(pd) {}

inline tcPDFPtr PDF::pdf() const {
  return thePDF;
}

inline tcPDPtr PDF::particle() const {
  return theParticle;
}

inline double PDF::xfl(tcPPtr parton, Energy2 partonScale, double l,
		       Energy2 particleScale) const {
  return xfl(parton->dataPtr(), partonScale, l, particleScale);
}

inline double PDF::xfx(tcPPtr parton, Energy2 partonScale, double x,
		       double eps, Energy2 particleScale) const {
  return xfx(parton->dataPtr(), partonScale, x, eps, particleScale);
}

inline double PDF::xfvl(tcPPtr parton, Energy2 partonScale, double l,
			Energy2 particleScale) const {
  return xfvl(parton->dataPtr(), partonScale, l, particleScale);
}

inline double PDF::xfvx(tcPPtr parton, Energy2 partonScale, double x,
			double eps, Energy2 particleScale) const {
  return xfvx(parton->dataPtr(), partonScale, x, eps, particleScale);
}

inline double PDF::xfl(tcPDPtr parton, Energy2 partonScale, double l,
		       Energy2 particleScale) const {
  return thePDF?
    thePDF->xfl(theParticle, parton, partonScale, l, particleScale): 0.0;
}

inline double PDF::xfx(tcPDPtr parton, Energy2 partonScale, double x,
		       double eps, Energy2 particleScale) const {
  return thePDF?
    thePDF->xfx(theParticle, parton, partonScale, x, eps, particleScale): 0.0;
}

inline double PDF::xfvl(tcPDPtr parton, Energy2 partonScale, double l,
			Energy2 particleScale) const {
  return thePDF?
    thePDF->xfvl(theParticle, parton, partonScale, l, particleScale): 0.0;
}

inline double PDF::xfvx(tcPDPtr parton, Energy2 partonScale, double x,
			double eps, Energy2 particleScale) const {
  return thePDF?
    thePDF->xfvx(theParticle, parton, partonScale, x, eps, particleScale): 0.0;
}

}
