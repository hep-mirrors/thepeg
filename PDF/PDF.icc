// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the PDF class.
//

namespace ThePEG {

inline PDF::PDF() {}

inline PDF::PDF(const PDF & x)
  : thePDF(x.thePDF), theParticle(x.theParticle) {}

inline PDF::PDF(tcPBPtr pb) {
  if ( !pb ) return;
  thePDF = pb->pdf();
  theParticle = pb->particle();
}

inline PDF::~PDF() {}

inline PDF & PDF::operator=(const PDF & pdf) {
  thePDF = pdf.thePDF;
  theParticle = pdf.theParticle;
  return *this;
}

inline double PDF::xfl(tcPPtr parton, Energy2 partonScale, double l,
		       Energy2 particleScale) const {
  return xfl(parton->dataPtr(), partonScale, l, particleScale);
}

inline double PDF::xfx(tcPPtr parton, Energy2 partonScale, double x,
		       double eps, Energy2 particleScale) const {
  return xfx(parton->dataPtr(), partonScale, x, eps, particleScale);
}

inline double PDF::xfvl(tcPPtr parton, Energy2 partonScale, double l,
			Energy2 particleScale) const {
  return xfvl(parton->dataPtr(), partonScale, l, particleScale);
}

inline double PDF::xfvx(tcPPtr parton, Energy2 partonScale, double x,
			double eps, Energy2 particleScale) const {
  return xfvx(parton->dataPtr(), partonScale, x, eps, particleScale);
}

inline double PDF::xfl(tcPDPtr parton, Energy2 partonScale, double l,
		       Energy2 particleScale) const {
  return thePDF?
    thePDF->xfl(theParticle, parton, partonScale, l, particleScale): 0.0;
}

inline double PDF::xfx(tcPDPtr parton, Energy2 partonScale, double x,
		       double eps, Energy2 particleScale) const {
  return thePDF?
    thePDF->xfx(theParticle, parton, partonScale, x, eps, particleScale): 0.0;
}

inline double PDF::xfvl(tcPDPtr parton, Energy2 partonScale, double l,
			Energy2 particleScale) const {
  return thePDF?
    thePDF->xfvl(theParticle, parton, partonScale, l, particleScale): 0.0;
}

inline double PDF::xfvx(tcPDPtr parton, Energy2 partonScale, double x,
			double eps, Energy2 particleScale) const {
  return thePDF?
    thePDF->xfvx(theParticle, parton, partonScale, x, eps, particleScale): 0.0;
}

}
