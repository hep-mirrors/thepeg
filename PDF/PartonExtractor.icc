// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the PartonExtractor class.
//

namespace ThePEG {

inline tcPDFPtr PartonExtractor::noPDF() const {
  return theNoPDF;
}

inline IBPtr PartonExtractor::clone() const {
  return new_ptr(*this);
}

inline IBPtr PartonExtractor::fullclone() const {
  return new_ptr(*this);
}

inline bool PartonExtractor::canHandle(const cPDPair &) {
  return true;
}

inline PartonExtractor::PartonBinInstanceMap &
PartonExtractor::partonBinInstances() {
  return thePartonBinInstances;
}

inline const PartonExtractor::PartonBinInstanceMap &
PartonExtractor::partonBinInstances() const {
  return thePartonBinInstances;
}

inline int PartonExtractor::maxTries() const {
  return theMaxTries;
}

inline void PartonExtractor::doupdate() throw(UpdateException) {
  HandlerBase::doupdate();
}

inline void PartonExtractor::dofinish() {
  HandlerBase::dofinish();
}

inline void PartonExtractor::rebind(const TranslationMap & trans)
   throw(RebindException) {
  // dummy = trans.translate(dummy);
  HandlerBase::rebind(trans);
}

inline IVector PartonExtractor::getReferences() {
  IVector ret = HandlerBase::getReferences();
  // ret.push_back(dummy);
  return ret;
}

template <typename Iterator>
inline void PartonExtractor::
findConnect(tColinePtr line, tPPtr parton, bool anti,
	    Iterator first, Iterator last) const {
  for ( ; first != last; ++first ) {
    if ( *first != parton &&  (**first).hasColour(anti) &&
	 !(**first).colourLine(anti) ) {
      line->addColoured(*first, anti);
      return;
    }
  }
  throw RemColException(*this);
}

}

