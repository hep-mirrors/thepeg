// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the Interfaced class.
//

namespace ThePEG {

inline Interfaced::Interfaced()
  : theUseFlag(false) {}

inline Interfaced::Interfaced(const Interfaced & i)
  : InterfacedBase(i), theGenerator(i.theGenerator), theUseFlag(false) {}

inline Interfaced::Interfaced(string newName)
  : InterfacedBase(newName), theUseFlag(false) {}

inline Interfaced::~Interfaced() {}

inline tEGPtr Interfaced::generator() const {
  return theGenerator;
}

inline void Interfaced::setGenerator(tEGPtr generator) {
  theGenerator=generator;
}

inline bool Interfaced::used() const {
  return theUseFlag;
}

inline void Interfaced::useMe() const {
  if ( used() ) return;
  setUsed();
}

template <typename PtrT>
inline bool Interfaced::
setDefaultReference(PtrT & ptr, string classname, string objectname) {
  if ( ptr ) return true;
  const ClassDescriptionBase * db = DescriptionList::find(classname);
  if ( !db ) return false;
  ptr = dynamic_ptr_cast<PtrT>(db->create());
  if ( !ptr ) return false;
  reporeg(ptr, objectname);
  if ( !ptr->defaultInit() ) return false;
  return true;
}

}

