// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the InterfaceBase and RefInterfaceBase classes.
//

namespace ThePEG {

inline InterfaceBase::~InterfaceBase() {}

inline string InterfaceBase::description() const {
  return theDescription;
}

inline string InterfaceBase::className() const {
  return theClassName;
}

inline void InterfaceBase::
rebind(InterfacedBase &, const TranslationMap &, const IVector &) const {}

inline bool InterfaceBase::dependencySafe() const {
  return isDependencySafe;
}

inline void InterfaceBase::setDependencySafe() {
  isDependencySafe = true;
}

inline void InterfaceBase::setDependencySensitive() {
  isDependencySafe = false;
}

inline bool InterfaceBase::readOnly() const {
  return isReadOnly && (!NoReadOnly);
}
inline void InterfaceBase::setReadOnly() {
  isReadOnly = true;
}

inline void InterfaceBase::setReadWrite() {
  isReadOnly = false;
}

inline bool InterfaceBase::anonymous() const {
  return description().empty();
}

inline RefInterfaceBase::
RefInterfaceBase(string newName, string newDescription, string newClassName,
		 const type_info & newTypeInfo, string newRefClassName,
		 const type_info & newRefTypeInfo, bool depSafe,
		 bool readonly, bool norebind, bool nullable, bool defnull)
  : InterfaceBase(newName, newDescription, newClassName, newTypeInfo, depSafe,
		  readonly), theRefClassName(newRefClassName),
  theRefTypeInfo(newRefTypeInfo), dontRebind(norebind),
  isNullable(nullable), theDefaultIfNull(defnull) {}

inline string RefInterfaceBase::refClassName() const {
  return theRefClassName;
}

inline const type_info & RefInterfaceBase::refTypeInfo() const {
  return theRefTypeInfo;
}

inline bool RefInterfaceBase::noRebind() const {
  return dontRebind;
}

inline void RefInterfaceBase::setNoRebind() {
  dontRebind = true;
}

inline void RefInterfaceBase::setRebind() {
  dontRebind = false;
}

inline bool RefInterfaceBase::noNull() const {
  return !isNullable;
}

inline void RefInterfaceBase::setNullable() {
  isNullable = true;
}

inline void RefInterfaceBase::setNotNullable() {
  isNullable = false;
}

inline bool RefInterfaceBase::defaultIfNull() const {
  return theDefaultIfNull;
}

inline void RefInterfaceBase::setDefaultIfNull() {
  theDefaultIfNull = true;
}

inline void RefInterfaceBase::setNoDefaultIfNull() {
  theDefaultIfNull = false;
}

}
