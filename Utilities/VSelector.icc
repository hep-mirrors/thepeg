namespace ThePEG {

template <typename T, typename WeightType>
inline VSelector<T,WeightType>::VSelector(size_type reserved)
  : theSum(WeightType()) {
  reserve(reserved);
}

template <typename T, typename WeightType>
inline VSelector<T,WeightType>::VSelector(const VSelector<T,WeightType> & s)
  : theSums(s.theSums), theWeights(s.theWeights), theObjects(s.theObjects),
    theSum(s.theSum) {}

template <typename T, typename WeightType>
inline VSelector<T,WeightType>::~VSelector() {}

template <typename T, typename WeightType>
inline const VSelector<T,WeightType> & VSelector<T,WeightType>::
operator = (const VSelector<T,WeightType> & s) {
  theSums = s.theSums;
  theWeights = s.theWeights;
  theObjects = s.theObjects;
  theSum = s.theSum;
  return *this;
}

template <typename T, typename WeightType>
inline void VSelector<T,WeightType>::swap(VSelector<T,WeightType> & s) {
  theSums.swap(s.theSums);
  theWeights.swap(s.theWeights);
  theObjects.swap(s.theObjects);
  std::swap(theSum, s.theSum);
}

template <typename T, typename WeightType>
inline WeightType VSelector<T,WeightType>::insert(WeightType d, const T & t) {
  WeightType newSum = theSum + d;
  if ( newSum <= theSum ) return d;
  theSums.push_back(theSum = newSum);
  theWeights.push_back(d);
  theObjects.push_back(t);
  return theSum;
}

template <typename T, typename WeightType>
void VSelector<T,WeightType>::replace(const T & told, const T & tnew) {
  for ( iterator it = theObjects.begin(); it != theObjects.end(); ++it )
    if ( *it == told ) *it = tnew;
}

template <typename T, typename WeightType>
inline const T & VSelector<T,WeightType>::
select(double rnd, double * remainder) const throw(range_error) {
  return theObjects[iselect(rnd, remainder)];
}

template <typename T, typename WeightType>
inline T & VSelector<T,WeightType>::
select(double rnd, double * remainder) throw(range_error) {
  return theObjects[iselect(rnd, remainder)];
}

template <typename T, typename WeightType>
inline const T & VSelector<T,WeightType>::
operator[](double rnd) const throw(range_error) {
  return select(rnd, 0);
}

template <typename T, typename WeightType>
inline T & VSelector<T,WeightType>::operator[](double rnd) throw(range_error) {
  return select(rnd, 0);
}

template <typename T, typename WeightType>
template <typename RNDGEN>
inline T & VSelector<T,WeightType>::select(RNDGEN & rnd) throw(range_error) {
  double rem = 0.0;
  T & t = select(rnd(), &rem);
  rnd.push_back(rem);
  return t;
}

template <typename T, typename WeightType>
template <typename RNDGEN>
inline const T & VSelector<T,WeightType>::select(RNDGEN & rnd)
  const throw(range_error) {
  double rem = 0.0;
  const T & t = select(rnd(), &rem);
  rnd.push_back(rem);
  return t;
}

template <typename T, typename WeightType>
inline typename VSelector<T,WeightType>::const_iterator
VSelector<T,WeightType>::
begin() const {
  return theObjects.begin();
}

template <typename T, typename WeightType>
inline typename VSelector<T,WeightType>::const_iterator
VSelector<T,WeightType>::
end() const {
  return theObjects.end();
}

template <typename T, typename WeightType>
inline bool VSelector<T,WeightType>::empty() const {
  return theObjects.empty();
}

template <typename T, typename WeightType>
inline typename VSelector<T,WeightType>::size_type
VSelector<T,WeightType>::size() const {
  return theObjects.size();
}

template <typename T, typename WeightType>
inline void VSelector<T,WeightType>::reserve(size_type reserved) {
  theSums.reserve(reserved);
  theWeights.reserve(reserved);
  theObjects.reserve(reserved);
}

template <typename T, typename WeightType>
inline void VSelector<T,WeightType>::clear() {
  theSums.clear();
  theWeights.clear();
  theObjects.clear();
  theSum = WeightType();
}

template <typename T, typename WeightType>
inline WeightType VSelector<T,WeightType>::sum() const {
  return theSum;
}

template <typename OStream, typename T, typename WeightType>
OStream & operator<<(OStream & os, const VSelector<T,WeightType> & s) {
  s.output(os);
  return os;
}

template <typename IStream, typename T, typename WeightType>
IStream & operator>>(IStream & is, VSelector<T,WeightType> & s) {
  s.input(is);
  return is;
}

}
