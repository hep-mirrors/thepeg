// -*- C++ -*-
//
// UtilityBase.icc is a part of ThePEG - Toolkit for HEP Event Generation
// Copyright (C) 1999-2007 Leif Lonnblad
//
// ThePEG is licenced under version 2 of the GPL, see COPYING for details.
// Please respect the MCnet academic guidelines, see GUIDELINES for details.
//

namespace ThePEG {

template <typename Cont>
inline LorentzMomentum UtilityBase::sumMomentum(const Cont & c) {
  return LorentzMomentum(sumMomentum(c.begin(), c.end()));
}

template <typename Iterator>
inline LorentzMomentum UtilityBase::sumMomentum(Iterator first, Iterator last) {
  LorentzMomentum sum;
  typedef typename std::iterator_traits<Iterator>::value_type PType;
  typedef ParticleTraits<PType> Traits;

  while ( first != last ) sum += Traits::momentum(*first++);
  return sum;
}

template <typename Iterator>
inline void UtilityBase::transform(Iterator first, Iterator last,
				   const LorentzRotation & boost) {
  typedef typename std::iterator_traits<Iterator>::value_type PType;
  typedef ParticleTraits<PType> Traits;

  while ( first != last ) Traits::transform(*first++, boost);
}

template <typename Cont>
inline void UtilityBase::
transform(Cont & cont, const LorentzRotation & boost) {
  transform(cont.begin(), cont.end(), boost);
}

template <typename Iterator>
inline LorentzRotation UtilityBase::boostToCM(Iterator first, Iterator last) {
  return boostToCM(first, last, last, last);
}

template <typename Iterator>
inline LorentzRotation UtilityBase::
boostToCM(Iterator first, Iterator last, Iterator zAxis) {
  return boostToCM(first, last, zAxis, last);
}

template <typename PType>
inline LorentzRotation
UtilityBase::transformToMomentum(const PType & p, const Momentum3 & q) {
  typedef ParticleTraits<PType> Traits;
  LorentzMomentum q4(q, sqrt(q.mag2() + Traits::momentum(p).m2()));
  return transformToMomentum(p, q4);
}

template <typename PType>
inline LorentzRotation
UtilityBase::transformToMomentum(const PType & p, const LorentzMomentum & q) {
  return transformFromCMS(q)*transformToCMS(p);
}

template <typename PType>
inline LorentzRotation
UtilityBase::getTransformToMomentum(const PType & p, const Momentum3 & q,
				    const LorentzMomentum & k) {
  typedef ParticleTraits<PType> Traits;
  LorentzMomentum q4(q, sqrt(q.mag2() + Traits::momentum(p).m2()));
  return getTransformToMomentum(p, q4, k);
}

template <typename PType>
inline LorentzRotation
UtilityBase::getTransformToMomentum(const PType & p, const LorentzMomentum & q,
				    const LorentzMomentum & k) {
  typedef ParticleTraits<PType> Traits;
  LorentzMomentum k0 = Traits::momentum(p) - k;
  LorentzMomentum k1 = Traits::momentum(q) - k;
  return getBoostFromCM(make_pair(k1, k))*getBoostToCM(make_pair(k0, k));
}

}
