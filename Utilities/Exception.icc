// -*- C++ -*-
//
// Exception.icc is a part of ThePEG - Toolkit for HEP Event Generation
// Copyright (C) 1999-2007 Leif Lonnblad
//
// ThePEG is licenced under version 2 of the GPL, see COPYING for details.
// Please respect the MCnet academic guidelines, see GUIDELINES for details.
//
//
// This is the implementation of the inlined member functions of
// the Exception class.
//

namespace ThePEG {

inline Exception::Exception()
  : handled(false),
    theSeverity(unknown) {
  breakThePEG();
}

inline Exception::Exception(const Exception & ex)
  : std::exception(ex), theMessage(ex.message()), 
    handled(ex.handled), theSeverity(ex.severity()) {
  ex.handle();
}

inline const Exception & Exception::operator=(const Exception & ex) {
  handled = ex.handled;
  theMessage << ex.message();
  theSeverity = ex.severity();
  ex.handle();
  return *this;
}

inline bool Exception::operator==(const Exception & ex) const {
  return ( message() == ex.message() && severity() == ex.severity() );
}
  
inline bool Exception::operator<(const Exception & ex) const {
  return ( severity() == ex.severity()? ( message() < ex.message() ):
	                                ( severity() < ex.severity() ) );
}

inline const char* Exception::what () const throw() {
  return message().c_str();
}
  
inline string Exception::message() const {
  string mess = theMessage.str();
  return mess.size()? mess: string("Error message not provided.");
}

inline Exception::Severity Exception::severity() const {
  return theSeverity;
}

inline void Exception::handle() const {
  handled = true;
}

template <typename T>
inline Exception & Exception::operator<<(const T & t) {
  theMessage << t;
  return *this;
}

inline Exception & Exception::operator<<(Severity sev) {
  severity(sev);
  return *this;
}

}
