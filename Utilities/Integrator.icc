// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the Integrator class.
//

namespace ThePEG {

template <typename FncT, typename RetT, typename ValT, typename ArgT>
inline Integrator<FncT,RetT,ValT,ArgT>::
Integrator(const FncT & fncin, ArgT minin, ArgT maxin,
	   double weightminin, double weightmaxin)
  : fnc(fncin), xmin(minin), xmax(maxin), wmin(weightminin), wmax(weightmaxin) {
  init(PeakSet());
}

template <typename FncT, typename RetT, typename ValT, typename ArgT>
template <typename Iterator>
inline Integrator<FncT,RetT,ValT,ArgT>::
Integrator(const FncT & fncin, ArgT minin, ArgT maxin,
	   double wminin, double wmaxin, Iterator peak0in, Iterator peaknin)
  : fnc(fncin), xmin(minin), xmax(maxin), wmin(wminin), wmax(wmaxin) {
  init(PeakSet(peak0in, peaknin));
}

template <typename FncT, typename RetT, typename ValT, typename ArgT>
inline RetT Integrator<FncT,RetT,ValT,ArgT>::integrate(Bin lo, Bin up) const {
  return (up->first - lo->first)*0.5*(lo->second + up->second);
}

template <typename FncT, typename RetT, typename ValT, typename ArgT>
inline ArgT Integrator<FncT,RetT,ValT,ArgT>::
generate(CBin lo, CBin up, double rnd) const {
  return (up->second*lo->first - lo->second*up->first +
	  sqrt((sqr(lo->second) + rnd*(sqr(up->second) - sqr(lo->second))))*
	  (up->first - lo->first))/(up->second - lo->second);
}

template <typename FncT, typename RetT, typename ValT, typename ArgT>
inline RetT Integrator<FncT,RetT,ValT,ArgT>::integral() const {
  return selector.sum()*wmax;
}

template <typename FncT, typename RetT, typename ValT, typename ArgT>
inline const FncT & Integrator<FncT,RetT,ValT,ArgT>::function() const {
  return fnc;
}

}

