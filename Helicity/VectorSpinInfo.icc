// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the VectorSpinInfo class.
//
// Author: Peter Richardson
//

#include "ThePEG/Helicity/HelicityDefinitions.h"

namespace ThePEG {
namespace Helicity {

inline VectorSpinInfo::VectorSpinInfo()
{
  _productionstates.resize(3,LorentzPolarizationVector());
  _currentstates.resize(3,LorentzPolarizationVector());
  _decaystates.resize(3,LorentzPolarizationVector());
  setSpin(3);
  _decaycalc = false;
}

inline VectorSpinInfo::VectorSpinInfo(const VectorSpinInfo & x)
  : SpinInfo(x), _productionstates(x._productionstates),
    _decaystates(x._decaystates), _currentstates(x._currentstates),
    _decaycalc(x._decaycalc) {}

inline VectorSpinInfo::VectorSpinInfo(const Lorentz5Momentum & in,bool intime)
{
  _productionstates.resize(3,LorentzPolarizationVector());
  _currentstates.resize(3,LorentzPolarizationVector());
  _decaystates.resize(3,LorentzPolarizationVector());
  setSpin(3);
  setProductionMomentum(in);
  _decaycalc=false;
  setTimelike(intime);
}

inline EIPtr VectorSpinInfo::clone() const
{
  tcSpinPtr temp=this;
  return const_ptr_cast<SpinPtr>(temp);
}

inline void VectorSpinInfo::rebind(const EventTranslationMap & trans) {
  SpinInfo::rebind(trans);
}

// set and get methods for the basis states
// set the basis state, this is production state
inline void VectorSpinInfo::
setBasisState(int ihel, LorentzPolarizationVector in) const
{  
  if ( ihel == -1 || ihel == 1 || ihel == 0 )
    {
      _productionstates[ihel+1]=in;
      _currentstates[ihel+1]=in;
    }
  else throw HelicityLogicalError()
    << "Tried to set invalid vector basis state in VectorSpinInfo."
    << Exception::abortnow;
}

inline void VectorSpinInfo::
setDecayState(int ihel, LorentzPolarizationVector in) const
{
  if(ihel==-1||ihel==1||ihel==0) {
    _decaycalc=true;
    _decaystates[ihel+1]=in;
  } else throw HelicityLogicalError()
    << "Tried to set invalid vector basis state in VectorSpinInfo."
    << Exception::abortnow;
}

// get the basis state for the production
inline LorentzPolarizationVector VectorSpinInfo::
getProductionBasisState(int ihel) const
{
  if ( ihel != -1 && ihel != 1 && ihel != 0 ) throw HelicityLogicalError()
    << "Tried to get invalid vector basis state in VectorSpinInfo."
    << Exception::abortnow;
  return _productionstates[ihel+1];
}

// get the bassis state for the decay
inline LorentzPolarizationVector VectorSpinInfo::
getDecayBasisState(int ihel) const
{
  // check this is a valid helicity
  if ( ihel != -1 && ihel != 1 && ihel != 0 ) throw HelicityLogicalError()
    << "Tried to get invalid vector basis state in VectorSpinInfo."
    << Exception::abortnow;
  // calculate the decay basis states if needed
  if(!_decaycalc)
    {
      for(unsigned int ix=0;ix<3;++ix)
	{_decaystates[ix]=_currentstates[ix].conjugate();}
      _decaycalc=true;
    }
  // return the basis function
  return _decaystates[ihel+1];
}

}
}
