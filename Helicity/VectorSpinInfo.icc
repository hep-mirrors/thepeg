// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the VectorSpinInfo class.
//

namespace ThePEG {
  namespace Helicity {
    using namespace ThePEG;

    inline VectorSpinInfo::VectorSpinInfo() 
    {
      _productionstates.resize(3);
      _decaystates.resize(3);
      setSpin(3);
      _decaycalc = false;
    }
    
    inline VectorSpinInfo::VectorSpinInfo(const VectorSpinInfo & x)
      : SpinInfo(x), _productionstates(x._productionstates),
	_decaystates(x._decaystates), _decaycalc(x._decaycalc) {}
   
    inline VectorSpinInfo::VectorSpinInfo(const Lorentz5Momentum & in,bool intime)
    {
      _productionstates.resize(3);
      _decaystates.resize(3);
      setSpin(3);
      setProductionMomentum(in);
      _decaycalc=false;
      setTimelike(intime);
    }
    
    inline EIPtr VectorSpinInfo::clone() const
    {
      tcSpinPtr temp=this;
      return const_ptr_cast<SpinPtr>(temp);
    }

    inline void VectorSpinInfo::rebind(const EventTranslationMap & trans) {
      SpinInfo::rebind(trans);
    }

    // set and get methods for the basis states
    // set the basis state, this is production state
    inline void VectorSpinInfo::setBasisState(int ihel,LorentzPolarizationVector in) const
    {
      if(ihel==-1||ihel==1||ihel==0){_productionstates[ihel+1]=in;}
      else{cerr << "Tried to set invalid vector basis state" << endl;}
    }
    inline void VectorSpinInfo::setDecayState(int ihel, LorentzPolarizationVector in) const
    {
      if(ihel==-1||ihel==1||ihel==0){_decaycalc=true;_decaystates[ihel+1]=in;}
      else{cerr << "Tried to set invalid vector basis state" << endl;}
    }
    // get the basis state for the production
    inline LorentzPolarizationVector VectorSpinInfo::getProductionBasisState(int ihel) const
    {
      static LorentzPolarizationVector dummy;
      if(ihel!=-1&&ihel!=1&&ihel!=0)
	{cerr << "Tried to get invalid vector basis state" << endl;return dummy;}
      return _productionstates[ihel+1];
    }
    // get the bassis state for the decay
    inline LorentzPolarizationVector VectorSpinInfo::getDecayBasisState(int ihel) const
    {
      static LorentzPolarizationVector dummy;
      // check this is a valid helicity
      if(ihel!=-1&&ihel!=1&&ihel!=0)
	{cerr << "Tried to get invalid vector basis state" << endl;return dummy;}
      // calculate the decay basis states if needed
      if(!_decaycalc)
	{
	  // now use this to evaluate the basis states in the decay frame
	  Hep3Vector boostv=- productionMomentum().boostVector();
	  _decaystates[0] =_productionstates[0].boost(boostv).conjugate();
	  _decaystates[1] =_productionstates[1].boost(boostv).conjugate();
	  _decaystates[2] =_productionstates[2].boost(boostv).conjugate();
	  _decaycalc=true;
	}
      // return the basis function
      return _decaystates[ihel+1];
    }
  }
}
