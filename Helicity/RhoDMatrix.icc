// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the RhoDMatrix class.
//

namespace ThePEG {
  namespace Helicity {
    using namespace ThePEG;
    inline RhoDMatrix::RhoDMatrix(int inspin) 
      :  _ispin(inspin){}
    inline RhoDMatrix::RhoDMatrix() {}
    
    inline RhoDMatrix::RhoDMatrix(const RhoDMatrix & x)
      :   _ispin(x._ispin) 
    {
      for(int ix=0;ix<_ispin&&ix<5;++ix)
	{for(int iy=0;iy<_ispin&&iy<5;++iy){_matrix[ix][iy]=x._matrix[ix][iy];}}
    }

    inline complex<double> RhoDMatrix::operator () (int ix,int iy) const
    // operator to return an element of the matrix
    {
      if(ix<-_ispin/2||ix>_ispin/2)
	{
	  cerr << "Invalid 1st index called for rho matrix " << ix 
	       << "   " << _ispin << endl;
	  return 0.;
	}
      else if(ix==0&&_ispin%2==0)
	{
	  cerr << "Zero element called for rho matrix with a fermion" << endl;
	  return 0.;
	}
      else 
	{
	  if(iy<-_ispin/2||iy>_ispin/2)
	    {
	      cerr << "Invalid 2nd index called for rho matrix " << iy  
	       << "   " << _ispin << endl;
	      return 0.;
	    }
	  else if(iy==0&&_ispin%2==0)
	    {
	      cerr << "Zero element called for rho matrix with a fermion" << endl;
	      return 0.;
	    }
	  else
	    // return the element
	    {return _matrix[ix+_ispin][iy+_ispin];}
	}
    }

    inline complex<double> & RhoDMatrix::operator () (int ix,int iy) 
    // operator to return an element of the matrix
    {
      static complex<double> dummy;
      if(ix<-_ispin/2||ix>_ispin/2)
	{
	  cerr << "Invalid 1st index called for rho matrix " << ix  
	       << "   " << _ispin << endl;
	  return dummy;
	}
      else if(ix==0&&_ispin%2==0)
	{
	  cerr << "Zero element called for rho matrix with a fermion" << endl;
	  return dummy;
	}
      else 
	{
	  if(iy<-_ispin/2||iy>_ispin/2)
	    {
	      cerr << "Invalid 2nd index called for rho matrix " << iy  
	       << "   " << _ispin << endl;
	      return dummy;
	    }
	  else if(iy==0&&_ispin%2==0)
	    {
	      cerr << "Zero element called for rho matrix with a fermion" << endl;
	      return dummy;
	    }
	  else
	    // return the element
	    {
	      int ia=int(_ispin/2)+ix-int(_ispin%2==0&&ix>0);
	      int ib=int(_ispin/2)+iy-int(_ispin%2==0&&iy>0);
	      return _matrix[ia][ib];
	    }
	}
    }
    // set 2s+1 for the particle
    inline void RhoDMatrix::setSpin(int in){_ispin=in;}
    // get 2s+1 for the particle
    inline int RhoDMatrix::getSpin(){return _ispin;}
    // set the matrix to 1/(2s+1) on diagonals and zero elsewhere
    inline void RhoDMatrix::average()
      {
	if(_ispin>0&_ispin<6)
	  {
	    for(int ix=0;ix<_ispin;++ix)
	      {
		for(int iy=0;iy<_ispin;++iy){_matrix[ix][iy]=0.;}
		_matrix[ix][ix]=1./_ispin;
	      }
	  }
	else
	  {cerr << "Invalid spin in RhoDMatrix::average" << endl;}
      }

    // assignment operator.
    inline RhoDMatrix & RhoDMatrix::operator=(const RhoDMatrix & in)
    {
      _ispin=in._ispin;
      for(int ix=0;ix<_ispin&&ix<5;++ix)
	{
	  for(int iy=0;iy<_ispin&&iy<5;++iy)
	    {
	      _matrix[ix][iy]=in._matrix[ix][iy];
	    }
	}
      return *this;
    }
    inline void RhoDMatrix::normalize()
    {
      static double epsa=1e-30,epsb=1e-10;
      complex<double> norm=0;
      for(int ix=0;ix<5&&ix<_ispin;++ix){norm+=_matrix[ix][ix];}
      if(norm.real()<epsa)
	{cerr << "RhoDMatrix::normalize() the trace is too small " 
	      << norm.real() << endl; return;}
      else if(norm.imag()/norm.real()>epsb)
	{cerr << "RhoDMatrix::normalize() the imaginary part of the trace is too large"
	      << norm.imag() << endl;return;}
      else
	{
	  norm=1./norm;
	  for(int ix=0;ix<5&&ix<_ispin;++ix)
	    {for(int iy=0;iy<5&&iy<_ispin;++iy){_matrix[ix][iy]*=norm;}}
	}
    }
    inline void RhoDMatrix::output()
    {
      
      for(int ix=0;ix<5&&ix<_ispin;++ix)
	{
	  for(int iy=0;ix<5&&iy<_ispin;++iy){cout << _matrix[ix][iy] << "  ";}
	  cout << endl;
	}
    }
    inline void RhoDMatrix::zero()
    {
      for(int ix=0;ix<5&&ix<_ispin;++ix)
	{
	  for(int iy=0;ix<5&&iy<_ispin;++iy){_matrix[ix][iy]=0.;}}
    }
  }
}
