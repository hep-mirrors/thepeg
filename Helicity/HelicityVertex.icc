// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the HelicityVertex class.
//
// Author: Peter Richardson
//

#include "ThePEG/Helicity/HelicityDefinitions.h"

namespace ThePEG {
namespace Helicity {

// access to the incoming particles
inline HelicityVertex::SpinVector HelicityVertex::incoming() const {
  return _incoming;
}

// access to the outgoing particles
inline HelicityVertex::SpinVector HelicityVertex::outgoing() const {
  return _outgoing;
}

// add an incoming particle
inline void HelicityVertex::addIncoming(tcSpinPtr in,int & loc)
{
  _incoming.push_back(in);loc=_incoming.size()-1;
}

// add an outgoing particle
inline void HelicityVertex::addOutgoing(tcSpinPtr in,int & loc)
{
  _outgoing.push_back(in);loc=_outgoing.size()-1;
}

inline void HelicityVertex::resetIncoming(tcSpinPtr in,int loc)
{
  if ( loc < int(_incoming.size()) && loc >= 0 ) _incoming[loc]=in;
  else throw HelicityLogicalError()
    << "reset invalid incoming particle in HelictityVertex " << loc
    << Exception::abortnow;
}

inline void HelicityVertex::resetOutgoing(tcSpinPtr in,int loc)
{
  if ( loc < int(_outgoing.size()) && loc >= 0 ) _outgoing[loc]=in;
  else throw HelicityLogicalError()
    << "reset invalid outgoing particle in HelicityVertex " << loc
    << Exception::abortnow;
}

inline void HelicityVertex::output() const
{
  cout << "the incoming particles at the vertex are" << endl;
  for(unsigned int ix=0;ix<_incoming.size();++ix) {
    cout << "the " << ix << " th incoming particle " << _incoming[ix] << endl;
  }
  cout << "the outgoing particles at the vertex are" << endl;
  for(unsigned int ix=0;ix<_outgoing.size();++ix)
    {
      cout << "the " << ix << " th outgoing particle " << _outgoing[ix] << endl;
    }
}

inline void HelicityVertex::rebind(const EventTranslationMap & trans) {
  EventInfoBase::rebind(trans);
  for(unsigned int ix=0;ix<_incoming.size();++ix)
    {
      _incoming[ix]=trans.translate(_incoming[ix]);
    }
  for(unsigned int ix=0;ix<_outgoing.size();++ix)
    {
      _outgoing[ix]=trans.translate(_outgoing[ix]);
    }
}

}
}
