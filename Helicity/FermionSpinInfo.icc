// -*- C++ -*-
//
// FermionSpinInfo.icc is a part of ThePEG - Toolkit for HEP Event Generation
// Copyright (C) 2003-2007 Peter Richardson, Leif Lonnblad
//
// ThePEG is licenced under version 2 of the GPL, see COPYING for details.
// Please respect the MCnet academic guidelines, see GUIDELINES for details.
//
//
// This is the implementation of the inlined member functions of
// the FermionSpinInfo class.
//
// Author: Peter Richardson
//

namespace ThePEG {
namespace Helicity {

inline FermionSpinInfo::FermionSpinInfo() 
  : SpinInfo(PDT::Spin1Half),
    _productionstates(2), _currentstates(2), _decaystates(2), 
    _decaycalc(false) {}
  
inline FermionSpinInfo::
FermionSpinInfo(const Lorentz5Momentum & in,bool intime)
  : SpinInfo(PDT::Spin1Half, in, intime),
    _productionstates(2), _currentstates(2), _decaystates(2),
    _decaycalc(false) {}

inline EIPtr FermionSpinInfo::clone() const
{
  tcSpinPtr temp=this;
  return const_ptr_cast<SpinPtr>(temp);
}

inline void FermionSpinInfo::rebind(const EventTranslationMap & trans) {
  SpinInfo::rebind(trans);
}

// set and get methods for the basis states
// set the basis state, this is production state
inline void FermionSpinInfo::setBasisState(unsigned int ihel,LorentzSpinor<SqrtEnergy> in) const
{
  if(ihel<=1)
    {
      _productionstates[ihel]=in;
      _currentstates[ihel]=in;
    }
  else throw HelicityLogicalError()
      << "Tried to set invalid fermion basis state in FermionSpinInfo class."
      << Exception::abortnow;

}

inline void FermionSpinInfo::setDecayState(unsigned int ihel,LorentzSpinor<SqrtEnergy> in) const
{
  if(ihel<=1){
    _decaycalc=true;
    _decaystates[ihel]=in;
  } else throw HelicityLogicalError()
    << "Tried to set invalid fermion basis state in FermionSpinInfo class."
    << Exception::abortnow;
}

// get the basis state for the production
inline LorentzSpinor<SqrtEnergy> FermionSpinInfo::getProductionBasisState(unsigned int ihel) const
{
  if(ihel>1) throw HelicityLogicalError()
    << "Tried to get invalid fermion basis state in FermionSpinInfo class."
    << Exception::abortnow;
  return _productionstates[ihel];
}

// get the current basis state
inline LorentzSpinor<SqrtEnergy> FermionSpinInfo::getCurrentBasisState(unsigned int ihel) const
{
  if(ihel>1) throw HelicityLogicalError()
    << "Tried to get invalid fermion basis state in FermionSpinInfo class."
    << Exception::abortnow;
  return _currentstates[ihel];
}

// get the basis state for the decay
inline LorentzSpinor<SqrtEnergy> FermionSpinInfo::getDecayBasisState(unsigned int ihel) const
{
  // check this is a valid helicity
  if (ihel>1)
    throw HelicityLogicalError()
      << "Tried to get invalid fermion basis state in FermionSpinInfo class."
      << Exception::abortnow;
  // calculate the decay basis states if needed
  if(!_decaycalc)
    {
      for(unsigned int ix=0;ix<2;++ix)
	{_decaystates[ix]=_currentstates[ix];}
      _decaycalc=true;
    }
  // return the basis function
  return _decaystates[ihel];
}

}
}
