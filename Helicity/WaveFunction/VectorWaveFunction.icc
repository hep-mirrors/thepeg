// -*- C++ -*-
//
// VectorWaveFunction.icc is a part of ThePEG - Toolkit for HEP Event Generation
// Copyright (C) 2003-2007 Peter Richardson, Leif Lonnblad
//
// ThePEG is licenced under version 2 of the GPL, see COPYING for details.
// Please respect the MCnet academic guidelines, see GUIDELINES for details.
//
//
// This is the implementation of the inlined member functions of
// the VectorWaveFunction class.
//
// Author: Peter Richardson
//

namespace ThePEG {
namespace Helicity {

// default constructors (set the momentum and Wavefunction)
// use a 5-mometum and a polarization vector
inline VectorWaveFunction::VectorWaveFunction(const Lorentz5Momentum & p,tcPDPtr part,
					      const LorentzPolarizationVector &vec,
					      Direction dir) {
  direction(dir);
  setMomentum(p);
  checkParticle(part);
  _wf=vec;
}

// use a 5-momentum and specify all components
inline VectorWaveFunction::VectorWaveFunction(const Lorentz5Momentum & p,tcPDPtr part,
					      const Complex & s1, const Complex & s2,
					      const Complex & s3, const Complex & s4) {
  direction(intermediate);
  setMomentum(p);
  checkParticle(part);
  setX(s1);setY(s2);setZ(s3);setT(s4);
}

// use a 5 momentum (specify phase choice)
inline VectorWaveFunction::VectorWaveFunction(const Lorentz5Momentum & p,
					      const tcPDPtr & part,unsigned int ihel,
					      Direction dir, VectorPhase phase) {
  direction(dir);
  setMomentum(p);
  checkParticle(part);
  calculateWaveFunction(ihel,phase);
}

// set all components of momentum (specify phase choice)
inline VectorWaveFunction::VectorWaveFunction(Energy px, Energy py,
					      Energy pz, Energy ee, Energy mm,
					      const tcPDPtr & part,unsigned int ihel,
					      Direction dir,VectorPhase phase) {
  direction(dir);
  setMomentum(px,py,pz,ee,mm);
  checkParticle(part);
  calculateWaveFunction(ihel,phase);
}

// set 4-momentum components (specify phase choice)
inline VectorWaveFunction::VectorWaveFunction(Energy px, Energy py,
					      Energy pz, Energy ee,
					      const tcPDPtr & part,unsigned int ihel, 
					      Direction dir, VectorPhase phase) {
  direction(dir);
  setMomentum(px,py,pz,ee); 
  checkParticle(part);
  calculateWaveFunction(ihel,phase);
}

// set 4-momentum (specify phase choice)
inline VectorWaveFunction::VectorWaveFunction(LorentzMomentum pin,
					      const tcPDPtr & part,unsigned int ihel,
					      Direction dir, VectorPhase phase) {
  direction(dir);
  setMomentum(pin);
  checkParticle(part);
  calculateWaveFunction(ihel,phase);
}

// set mass zero momentum (specify phase choice)
inline VectorWaveFunction::VectorWaveFunction(Energy mm, const tcPDPtr & part,
					      unsigned int ihel, Direction dir, 
					      VectorPhase phase) {
  direction(dir);
  setMomentum(mm);
  checkParticle(part);
  calculateWaveFunction(ihel,phase);
}

// set 4 momentum and mass (specify phase choice)
inline VectorWaveFunction::VectorWaveFunction(LorentzMomentum pin,Energy mm,
					      const tcPDPtr & part, unsigned int ihel,
					      Direction dir, VectorPhase phase) {
  direction(dir);
  setMomentum(pin,mm); 
  checkParticle(part); 
  calculateWaveFunction(ihel,phase);
}

// default constructors (set the momentum and zero the Wavefunction)

// use a 5 momentum
inline VectorWaveFunction::VectorWaveFunction(Lorentz5Momentum p,
					      const tcPDPtr & part, Direction dir) {
  direction(dir);
  setMomentum(p);
  checkParticle(part);
  zeroWaveFunction();
}

// set all components of momentum
inline VectorWaveFunction::VectorWaveFunction(Energy px, Energy py,
					      Energy pz, Energy ee, Energy mm,
					      const tcPDPtr & part, Direction dir) {
  direction(dir);
  setMomentum(px,py,pz,ee,mm);
  checkParticle(part);
  zeroWaveFunction();
}

// set 4-momentum components 
inline VectorWaveFunction::VectorWaveFunction(Energy px, Energy py,
					      Energy pz, Energy ee,
					      const tcPDPtr & part, Direction dir) {
  direction(dir);
  setMomentum(px,py,pz,ee);
  checkParticle(part);
  zeroWaveFunction();
}

// set 4-momentum 
inline VectorWaveFunction::VectorWaveFunction(LorentzMomentum pin,
					      const tcPDPtr & part, Direction dir) {
  direction(dir);
  setMomentum(pin);
  checkParticle(part);
  zeroWaveFunction();
}

// set mass zero momentum
inline VectorWaveFunction::VectorWaveFunction(Energy mm,
					      const tcPDPtr & part,Direction dir) {
  direction(dir);
  setMomentum(mm);
  checkParticle(part);
  zeroWaveFunction();
}

// set 4 momentum and mass
inline VectorWaveFunction::VectorWaveFunction(LorentzMomentum pin,Energy mm,
					      const tcPDPtr & part, Direction dir) {
  direction(dir);
  setMomentum(pin,mm);
  checkParticle(part);
  zeroWaveFunction();
}

// default constructor
inline VectorWaveFunction::VectorWaveFunction() {
  direction(intermediate);
  setMomentum();
  zeroWaveFunction();
}

// return wavefunction as polarization vector
inline const LorentzPolarizationVector & VectorWaveFunction::wave() const {
  return _wf;
}

// Get position and time.
inline Complex VectorWaveFunction::x() const {return _wf.x();}
inline Complex VectorWaveFunction::y() const {return _wf.y();}
inline Complex VectorWaveFunction::z() const {return _wf.z();}
inline Complex VectorWaveFunction::t() const {return _wf.t();}

// Set position and time.
inline void VectorWaveFunction::setX(const Complex &in){_wf.setX(in);}
inline void VectorWaveFunction::setY(const Complex &in){_wf.setY(in);}
inline void VectorWaveFunction::setZ(const Complex &in){_wf.setZ(in);}
inline void VectorWaveFunction::setT(const Complex &in){_wf.setT(in);}

// reset functions


// reset the momentum, particle type and direction
inline void VectorWaveFunction::reset(const Lorentz5Momentum & pin, const tcPDPtr & part,
				      Direction dir) {
  direction(dir);
  checkParticle(part);
  setMomentum(pin);
}

// reset the momentum and direction
inline void VectorWaveFunction::reset(const Lorentz5Momentum & pin, Direction dir) {
  direction(dir);
  setMomentum(pin);
}

// reset the momentum
inline void VectorWaveFunction::reset(const Lorentz5Momentum & pin) {
  setMomentum(pin);
}

// reset the helicity (recalculation the polarization vector)
inline void VectorWaveFunction::reset(unsigned int ihel, VectorPhase phase) {
  calculateWaveFunction(ihel,phase);
}

// reset the particle type and direction
inline void VectorWaveFunction::reset(const tcPDPtr & part,Direction dir) {
  direction(dir);
  checkParticle(part);
}

// reset the particle type
inline void VectorWaveFunction::reset(const tcPDPtr & part) {
  checkParticle(part);
}	

// zero the wavefunction
inline void VectorWaveFunction::zeroWaveFunction() {
  _wf=LorentzPolarizationVector();
}

// check the particles
inline void VectorWaveFunction::checkParticle(const tcPDPtr & in) {
  setParticle(in);
  if(iSpin()!=3) {
    ThePEG::Helicity::HelicityConsistencyError()
      << "Calculating Vector WaveFunction for non-spin 1 Particle "
      << in->PDGName() << Exception::abortnow;
  }
}

// special setup constructor
VectorWaveFunction::VectorWaveFunction(vector<LorentzPolarizationVector>& wave,
					      tPPtr part,Direction dir,bool time,
					      bool massless,
					      bool vertex, VectorPhase phase) {
  direction(dir);
  setMomentum(part->momentum());
  checkParticle(part->dataPtr());
  zeroWaveFunction();
  constructSpinInfo(wave,part,time,massless,phase,vertex);
}

// special setup constructor
inline VectorWaveFunction::VectorWaveFunction(vector<LorentzPolarizationVector>& wave,
					      RhoDMatrix &rho,tPPtr part,Direction dir,
					      bool time,bool massless,
					      bool vertex, VectorPhase phase) {
  direction(dir);
  setMomentum(part->momentum());
  checkParticle(part->dataPtr());
  zeroWaveFunction();
  constructSpinInfo(wave,rho,part,time,massless,phase,vertex);
}

// special setup constructor
VectorWaveFunction::VectorWaveFunction(vector<VectorWaveFunction>& wave,
					      tPPtr part,Direction dir,bool time,
					      bool massless,
					      bool vertex, VectorPhase phase) {
  direction(dir);
  setMomentum(part->momentum());
  checkParticle(part->dataPtr());
  zeroWaveFunction();
  constructSpinInfo(wave,part,time,massless,phase,vertex);
}

// special setup constructor
inline VectorWaveFunction::VectorWaveFunction(vector<VectorWaveFunction>& wave,
					      RhoDMatrix &rho,tPPtr part,Direction dir,
					      bool time,bool massless,
					      bool vertex, VectorPhase phase) {
  direction(dir);
  setMomentum(part->momentum());
  checkParticle(part->dataPtr());
  zeroWaveFunction();
  constructSpinInfo(wave,rho,part,time,massless,phase,vertex);
}

}
}
