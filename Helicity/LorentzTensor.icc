// inline members of the LorentzTensor class
// constructors 
inline LorentzTensor::LorentzTensor()
{for(int ix=0;ix<4;++ix){for(int iy=0;iy<4;++iy){_tensor[ix][iy]=0.;}}}
// default zero constructor
inline LorentzTensor::LorentzTensor(LorentzPolarizationVector p,
				    LorentzPolarizationVector q)
{for(int ix=0;ix<4;++ix){for(int iy=0;iy<4;++iy){_tensor[ix][iy]=p[ix]*q[iy];}}}
// constructor in terms of two polarization vectors
// constructor specifying all components
inline LorentzTensor::LorentzTensor(complex<double>xx,complex<double>xy,
				    complex<double>xz,complex<double>xt,
				    complex<double>yx,complex<double>yy,
				    complex<double>yz,complex<double>yt,
				    complex<double>zx,complex<double>zy,
				    complex<double>zz,complex<double>zt,
				    complex<double>tx,complex<double>ty,
				    complex<double>tz,complex<double>tt)
{_tensor[0][0]=xx;_tensor[0][1]=xy;_tensor[0][2]=xz;_tensor[0][3]=xt;
 _tensor[1][0]=yx;_tensor[1][1]=yy;_tensor[1][2]=yz;_tensor[1][3]=yt;
 _tensor[2][0]=zx;_tensor[2][1]=zy;_tensor[2][2]=zz;_tensor[2][3]=zt;
 _tensor[3][0]=tx;_tensor[3][1]=ty;_tensor[3][2]=tz;_tensor[3][3]=tt;}
inline complex<double> LorentzTensor::xx() const {return _tensor[0][0];}
inline complex<double> LorentzTensor::yx() const {return _tensor[1][0];}
inline complex<double> LorentzTensor::zx() const {return _tensor[2][0];}
inline complex<double> LorentzTensor::tx() const {return _tensor[3][0];}
inline complex<double> LorentzTensor::xy() const {return _tensor[0][1];}
inline complex<double> LorentzTensor::yy() const {return _tensor[1][1];}
inline complex<double> LorentzTensor::zy() const {return _tensor[2][1];}
inline complex<double> LorentzTensor::ty() const {return _tensor[3][1];}
inline complex<double> LorentzTensor::xz() const {return _tensor[0][2];}
inline complex<double> LorentzTensor::yz() const {return _tensor[1][2];}
inline complex<double> LorentzTensor::zz() const {return _tensor[2][2];}
inline complex<double> LorentzTensor::tz() const {return _tensor[3][2];}
inline complex<double> LorentzTensor::xt() const {return _tensor[0][3];}
inline complex<double> LorentzTensor::yt() const {return _tensor[1][3];}
inline complex<double> LorentzTensor::zt() const {return _tensor[2][3];}
inline complex<double> LorentzTensor::tt() const {return _tensor[3][3];}
// Get position and time.
inline void LorentzTensor::setXX(complex<double> a) {_tensor[0][0]=a;}
inline void LorentzTensor::setYX(complex<double> a) {_tensor[1][0]=a;}
inline void LorentzTensor::setZX(complex<double> a) {_tensor[2][0]=a;}
inline void LorentzTensor::setTX(complex<double> a) {_tensor[3][0]=a;}
inline void LorentzTensor::setXY(complex<double> a) {_tensor[0][1]=a;}
inline void LorentzTensor::setYY(complex<double> a) {_tensor[1][1]=a;}
inline void LorentzTensor::setZY(complex<double> a) {_tensor[2][1]=a;}
inline void LorentzTensor::setTY(complex<double> a) {_tensor[3][1]=a;}
inline void LorentzTensor::setXZ(complex<double> a) {_tensor[0][2]=a;}
inline void LorentzTensor::setYZ(complex<double> a) {_tensor[1][2]=a;}
inline void LorentzTensor::setZZ(complex<double> a) {_tensor[2][2]=a;}
inline void LorentzTensor::setTZ(complex<double> a) {_tensor[3][2]=a;}
inline void LorentzTensor::setXT(complex<double> a) {_tensor[0][3]=a;}
inline void LorentzTensor::setYT(complex<double> a) {_tensor[1][3]=a;}
inline void LorentzTensor::setZT(complex<double> a) {_tensor[2][3]=a;}
inline void LorentzTensor::setTT(complex<double> a) {_tensor[3][3]=a;}
// Set position and time
inline complex<double> LorentzTensor::operator () (int i,int j) const 
{
  if( i>=0 && i<=3 && j>=0 && j<=3)
    {;}
  else
    {
      std::cerr << "Invalid component of LorentzTensor " << i << " " << j << endl;
      return 0.;
    }
  return _tensor[i][j];
}
// Get components by index.
inline complex<double> & LorentzTensor::operator () (int i,int j)
{
  static complex<double> dummy;
  if( i>=0 && i<=3 && j>=0 && j<=3)
    {;}
  else
    {
      std::cerr << "Invalid component of LorentzTensor " << i << " " << j << endl;
      return dummy;
    }
  return _tensor[i][j];
}
// Set components by index.
// Assignment
inline LorentzTensor & LorentzTensor::operator = (const LorentzTensor & q)
{
  for(int ix=0;ix<4;++ix)
    {for(int iy=0;iy<4;++iy){_tensor[ix][iy]=q(ix,iy);}}
  return *this;
}
