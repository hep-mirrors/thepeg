// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the RSFermionSpinInfo class.
//
// Author: Peter Richardson
//

namespace ThePEG {
namespace Helicity {

inline RSFermionSpinInfo::RSFermionSpinInfo() 
{
  _productionstates.resize(4,LorentzRSSpinor());
  _decaystates.resize(4,LorentzRSSpinor());
  setSpin(4);
  _decaycalc=false;
}

inline RSFermionSpinInfo::RSFermionSpinInfo(const Lorentz5Momentum & in,bool intime)
{
  _productionstates.resize(4,LorentzRSSpinor());
  _decaystates.resize(4,LorentzRSSpinor());
  setSpin(4);
  setProductionMomentum(in);
  _decaycalc=false;
  setTimelike(intime);
}

inline RSFermionSpinInfo::RSFermionSpinInfo(const RSFermionSpinInfo & x)
  : SpinInfo(x), _productionstates(x._productionstates),
    _decaystates(x._decaystates), _decaycalc(x._decaycalc)
{}

inline EIPtr RSFermionSpinInfo::clone() const
{
  tcSpinPtr temp=this;
  return const_ptr_cast<SpinPtr>(temp);
}

inline void RSFermionSpinInfo::rebind(const EventTranslationMap & trans) {
  SpinInfo::rebind(trans);
}

// set and get methods for the basis states
// set the basis state, this is production state
inline void RSFermionSpinInfo::setBasisState(int ihel,LorentzRSSpinor in) const
{
  unsigned int ispin=ihel+2;
  if(ihel>0){--ispin;}
  if(ihel==-1||ihel==1||ihel==-2||ihel==2){_productionstates[ispin]=in;}
  else throw HelicityLogicalError()
      << "Tried to set invalid fermion basis state in RSFermionSpinInfo class."
      << Exception::abortnow;

}

inline void RSFermionSpinInfo::setDecayState(int ihel,LorentzRSSpinor in) const
{
  unsigned int ispin=ihel+2;
  if(ihel>0){--ispin;}
  if(ihel==-1||ihel==1||ihel==-2||ihel==2){
    _decaycalc=true;
    _decaystates[ispin]=in;
  } else throw HelicityLogicalError()
    << "Tried to set invalid fermion basis state in RSFermionSpinInfo class."
    << Exception::abortnow;
}

// get the basis state for the production
inline LorentzRSSpinor RSFermionSpinInfo::getProductionBasisState(int ihel) const
{
  unsigned int ispin=ihel+2;
  if(ihel>0){--ispin;}
  if ( ihel != -1 && ihel != 1 && ihel!=-2 && ihel!=2) throw HelicityLogicalError()
    << "Tried to get invalid fermion basis state in RSFermionSpinInfo class."
    << Exception::abortnow;
  return _productionstates[ispin];
}

// get the bassis state for the decay
inline LorentzRSSpinor RSFermionSpinInfo::getDecayBasisState(int ihel) const
{
  unsigned int ispin=ihel+2;
  if(ihel>0){--ispin;}
  // check this is a valid helicity
  if ( ihel != -1 && ihel != 1  && ihel!=-2 && ihel!=2)
    throw HelicityLogicalError()
      << "Tried to get invalid fermion basis state in RSFermionSpinInfo class."
      << Exception::abortnow;
  // calculate the decay basis states if needed
  if(!_decaycalc)
    {
      // now use this to evaluate the basis states in the decay frame
      Hep3Vector boostv=- productionMomentum().boostVector();
      _decaystates[0] =_productionstates[0].boost(boostv);
      _decaystates[1] =_productionstates[1].boost(boostv);
      _decaystates[2] =_productionstates[2].boost(boostv);
      _decaystates[3] =_productionstates[3].boost(boostv);
      _decaycalc=true;
    }
  // return the basis function
  return _decaystates[ispin];
}

}
}
