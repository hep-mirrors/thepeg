// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the RSFermionSpinInfo class.
//
// Author: Peter Richardson
//

namespace ThePEG {
namespace Helicity {

inline RSFermionSpinInfo::RSFermionSpinInfo() 
{
  _productionstates.resize(4,LorentzRSSpinor());
  _currentstates.resize(4,LorentzRSSpinor());
  _decaystates.resize(4,LorentzRSSpinor());
  iSpin(PDT::Spin3Half);
  _decaycalc=false;
}

inline RSFermionSpinInfo::RSFermionSpinInfo(const RSFermionSpinInfo & x)
  : SpinInfo(x), _productionstates(x._productionstates),
    _decaystates(x._decaystates), _currentstates(x._currentstates),
    _decaycalc(x._decaycalc) {}

inline RSFermionSpinInfo::RSFermionSpinInfo(const Lorentz5Momentum & in,bool intime)
{
  _productionstates.resize(4,LorentzRSSpinor());
  _currentstates.resize(4,LorentzRSSpinor());
  _decaystates.resize(4,LorentzRSSpinor());
  iSpin(PDT::Spin3Half);
  setProductionMomentum(in);
  _decaycalc=false;
  setTimelike(intime);
}

inline EIPtr RSFermionSpinInfo::clone() const
{
  tcSpinPtr temp=this;
  return const_ptr_cast<SpinPtr>(temp);
}

inline void RSFermionSpinInfo::rebind(const EventTranslationMap & trans) {
  SpinInfo::rebind(trans);
}

// set and get methods for the basis states
// set the basis state, this is production state
inline void RSFermionSpinInfo::setBasisState(unsigned int ihel,
					     LorentzRSSpinor in) const
{
  if(ihel<4)
    {
      _productionstates[ihel]=in;
      _currentstates[ihel]=in;
    }
  else throw HelicityLogicalError()
      << "Tried to set invalid fermion basis state in RSFermionSpinInfo class."
      << Exception::abortnow;

}

inline void RSFermionSpinInfo::setDecayState(unsigned int ihel,
					     LorentzRSSpinor in) const
{
  if(ihel<4){
    _decaycalc=true;
    _decaystates[ihel]=in;
  } else throw HelicityLogicalError()
    << "Tried to set invalid fermion basis state in RSFermionSpinInfo class."
    << Exception::abortnow;
}

// get the basis state for the production
inline LorentzRSSpinor RSFermionSpinInfo::
getProductionBasisState(unsigned int ihel) const
{
  if (ihel>3) throw HelicityLogicalError()
    << "Tried to get invalid fermion basis state in RSFermionSpinInfo class."
    << Exception::abortnow;
  return _productionstates[ihel];
}

// get the bassis state for the decay
inline LorentzRSSpinor RSFermionSpinInfo::getDecayBasisState(unsigned int ihel) const
{
  if (ihel>3)
    throw HelicityLogicalError()
      << "Tried to get invalid fermion basis state in RSFermionSpinInfo class."
      << Exception::abortnow;
  // calculate the decay basis states if needed
  if(!_decaycalc)
    {
      for(unsigned int ix=0;ix<4;++ix){_decaystates[ix]=_currentstates[ix];}
      _decaycalc=true;
    }
  // return the basis function
  return _decaystates[ihel];
}

}
}
