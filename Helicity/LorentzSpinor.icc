// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the LorentzSpinor class.
//
// Author: Peter Richardson
//

#include "ThePEG/Helicity/HelicityDefinitions.h"

namespace ThePEG {
namespace Helicity {

// default zero constructor
inline LorentzSpinor::LorentzSpinor() {
  _idirac=HelicityDefinitions::getDirac();
  _itype=0;
  for(int ix=0;ix<4;++ix) {_spin[ix]=0.0;}
}
inline LorentzSpinor::LorentzSpinor(int dirac, int type) {
  _idirac=dirac;
  _itype=type;
  for(int ix=0;ix<4;++ix) {
    _spin[ix]=0.0;
  }
}
inline LorentzSpinor::LorentzSpinor(int type) {
  _idirac=HelicityDefinitions::getDirac();
  _itype=type;
  for(int ix=0;ix<4;++ix) {
    _spin[ix]=0.0;
  }
}

// constructor with complex numbers
inline LorentzSpinor::
LorentzSpinor(int type, Complex a, Complex b, Complex c, Complex d) {
  _idirac=HelicityDefinitions::getDirac();
  _itype=type;
  _spin[0]=a;
  _spin[1]=b;
  _spin[2]=c;
  _spin[3]=d;
}
inline LorentzSpinor::
LorentzSpinor(int dirac, int type, Complex a, Complex b, Complex c, Complex d) {
  _idirac=dirac;
  _itype=type;
  _spin[0]=a;
  _spin[1]=b;
  _spin[2]=c;
  _spin[3]=d;
}

// subscript operator to return spinor components
inline Complex LorentzSpinor::operator[](int i) const
{
  if ( i >= 0 && i <= 3 ) return _spin[i];
  throw HelicityLogicalError()
    << "Invalid component of LorentzSpinor requested. Component:" << i
    << Exception::abortnow;
}

inline Complex LorentzSpinor::operator()(int i) const
{
  if ( i >= 0 && i <= 3 ) return _spin[i];
  throw HelicityLogicalError()
    << "Invalid component of LorentzSpinor Requested. Component:" << i
    << Exception::abortnow;
}

// set components by index
inline Complex & LorentzSpinor::operator () (int i){
  if ( i >= 0 && i <= 3 ) return _spin[i];
  throw HelicityLogicalError()
    << "Invalid index " << i << " called for LorentzSpinor."
    << Exception::abortnow;
}

inline Complex & LorentzSpinor::operator [] (int i){
  if ( i >= 0 && i <=3 ) return _spin[i];
  throw HelicityLogicalError()
    << "Invalid index " << i << " called for LorentzSpinor."
    << Exception::abortnow;
}

// Get components
inline Complex LorentzSpinor::s1() const {return _spin[0];}

inline Complex LorentzSpinor::s2() const {return _spin[1];}

inline Complex LorentzSpinor::s3() const {return _spin[2];}

inline Complex LorentzSpinor::s4() const {return _spin[3];}

// Set components
inline void LorentzSpinor::setS1(Complex in){_spin[0]=in;}

inline void LorentzSpinor::setS2(Complex in){_spin[1]=in;}

inline void LorentzSpinor::setS3(Complex in){_spin[2]=in;}

inline void LorentzSpinor::setS4(Complex in){_spin[3]=in;}

// the equals operator
inline LorentzSpinor & LorentzSpinor::operator = (const LorentzSpinor & in) {
  _idirac=in._idirac;
  _itype=in._itype;
  _spin[0]=in.s1();
  _spin[1]=in.s2();
  _spin[2]=in.s3();
  _spin[3]=in.s4();
  return *this;
}

// boost the spinor
inline LorentzSpinor LorentzSpinor::boost(double bx,double by,double bz) const
{
  // work out beta and chi
  double beta=sqrt(bx*bx+by*by+bz*bz);
  double chi = atanh(beta);
  double sinhchi = sinh(0.5*chi)/beta, coshchi = cosh(0.5*chi);
  // calculate the new spinor
  Complex out[4],ii(0.,1.);
  Complex nxminy=bx-ii*by;
  Complex nxpiny=bx+ii*by;
  switch(_idirac)
    {
      // Haber lower energy
    case 1:
      out[0] = coshchi*_spin[0]+sinhchi*( bz*_spin[2]+nxminy*_spin[3]);
      out[1] = coshchi*_spin[1]+sinhchi*(-bz*_spin[3]+nxpiny*_spin[2]);
      out[2] = coshchi*_spin[2]+sinhchi*( bz*_spin[0]+nxminy*_spin[1]);
      out[3] = coshchi*_spin[3]+sinhchi*(-bz*_spin[1]+nxpiny*_spin[0]);
      break;
      // HELAS
    case 2:
      out[0] = coshchi*_spin[0]+sinhchi*(-bz*_spin[0]-nxminy*_spin[1]);
      out[1] = coshchi*_spin[1]+sinhchi*(+bz*_spin[1]-nxpiny*_spin[0]);
      out[2] = coshchi*_spin[2]+sinhchi*(+bz*_spin[2]+nxminy*_spin[3]);
      out[3] = coshchi*_spin[3]+sinhchi*(-bz*_spin[3]+nxpiny*_spin[2]);
      break;
    }
  return LorentzSpinor(_idirac,_itype,out[0],out[1],out[2],out[3]);
}

// boost the spinor
inline LorentzSpinor LorentzSpinor::boost(const Hep3Vector & boostv) const
{
  double beta = boostv.mag();
  double bx=boostv.x(),by=boostv.y(),bz=boostv.z();
  double chi = atanh(beta);
  double sinhchi = sinh(0.5*chi)/beta, coshchi = cosh(0.5*chi);
  Complex out[4],ii(0.,1.);
  Complex nxminy=bx-ii*by;
  Complex nxpiny=bx+ii*by;
  switch(_idirac)
    {
      // Haber lower energy
    case 1:
      out[0] = coshchi*_spin[0]+sinhchi*(+bz*_spin[2]+nxminy*_spin[3]);
      out[1] = coshchi*_spin[1]+sinhchi*(-bz*_spin[3]+nxpiny*_spin[2]);
      out[2] = coshchi*_spin[2]+sinhchi*(+bz*_spin[0]+nxminy*_spin[1]);
      out[3] = coshchi*_spin[3]+sinhchi*(-bz*_spin[1]+nxpiny*_spin[0]);
      break;
      // HELAS
    case 2:
      out[0] = coshchi*_spin[0]+sinhchi*(-bz*_spin[0]-nxminy*_spin[1]);
      out[1] = coshchi*_spin[1]+sinhchi*(+bz*_spin[1]-nxpiny*_spin[0]);
      out[2] = coshchi*_spin[2]+sinhchi*(+bz*_spin[2]+nxminy*_spin[3]);
      out[3] = coshchi*_spin[3]+sinhchi*(-bz*_spin[3]+nxpiny*_spin[2]);
      break;
    }
  return LorentzSpinor(_idirac,_itype,out[0],out[1],out[2],out[3]);
}
// change the dirac matrix representation
inline void LorentzSpinor::changeRep(int newdirac)
{
  // do nothing if all ready in the correct representation
  if(newdirac==_idirac){return;}
  double fact=1./sqrt(2.);
  // transform from HELAS representation to Haber one
  Complex output[4];
  if(newdirac==2 && _idirac==1)
    {
      output[0] =-fact*( _spin[0]-_spin[2]);
      output[1] =-fact*( _spin[1]-_spin[3]);
      output[2] =-fact*( _spin[0]+_spin[2]);
      output[3] =-fact*( _spin[1]+_spin[3]);
    }
  // transform from Haber representation to HELAS one
  else if(newdirac==1 && _idirac==2)
    {
      output[0] =-fact*( _spin[0]+_spin[2]);
      output[1] =-fact*( _spin[1]+_spin[3]);
      output[2] =-fact*(-_spin[0]+_spin[2]);
      output[3] =-fact*(-_spin[1]+_spin[3]);
    }
  // invalid choice
  else
    {
      cerr << "invalid transformation for LorentzSpinor" << endl;
      return;
    }
  // reset the spinor
  _idirac=newdirac;
  for(unsigned int ix=0;ix<4;++ix){_spin[ix]=output[ix];}
}

// return the spinor in a different representation
inline LorentzSpinor LorentzSpinor::transformRep(int newdirac)
{
  // do nothing if all ready in the correct representation
  if(newdirac==_idirac){return *this;}
  double fact=1./sqrt(2.);
  // transform from HELAS representation to Haber one
  Complex output[4];
  if(newdirac==2 && _idirac==1)
    {
      output[0] =-fact*( _spin[0]-_spin[2]);
      output[1] =-fact*( _spin[1]-_spin[3]);
      output[2] =-fact*( _spin[0]+_spin[2]);
      output[3] =-fact*( _spin[1]+_spin[3]);
    }
  // transform from Haber representation to HELAS one
  else if(newdirac==1 && _idirac==2)
    {
      output[0] =-fact*( _spin[0]+_spin[2]);
      output[1] =-fact*( _spin[1]+_spin[3]);
      output[2] =-fact*(-_spin[0]+_spin[2]);
      output[3] =-fact*(-_spin[1]+_spin[3]);
    }
  // invalid choice
  else
    {
      cerr << "invalid transformation for LorentzSpinor" << endl;
      return *this;
    }
  // return the answer
  return LorentzSpinor(newdirac,_itype,output[0],output[1],output[2],output[3]);
}

// return the representation of the spinor
inline int LorentzSpinor::Rep(){return _idirac;}
}
}
