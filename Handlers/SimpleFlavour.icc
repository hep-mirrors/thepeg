// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the SimpleFlavour class.
//

namespace ThePEG {

inline SimpleFlavour::SimpleFlavour()
: theSSup(0.3), theDiSup(0.1), theDi1Sup(0.05), theDiSSup(0.4),
  theEtaSup(1.0), theEtaPSup(0.4), theBaryon10Sup(1.0), thePSpin1(0.5),
  thePSpinS1(0.6), thePSpinC1(0.75) {}

inline SimpleFlavour::SimpleFlavour(const SimpleFlavour & x)
  : FlavourGenerator(x), theSSup(x.theSSup), theDiSup(x.theDiSup),
    theDi1Sup(x.theDi1Sup), theDiSSup(x.theDiSSup),
    theEtaSup(x.theEtaSup), theEtaPSup(x.theEtaSup),
    theBaryon10Sup(x.theBaryon10Sup), thePSpin1(x.thePSpin1),
    thePSpinS1(x.thePSpinS1), thePSpinC1(x.thePSpinC1),
    theFlavourSelector(x.theFlavourSelector) {}

inline IBPtr SimpleFlavour::clone() const {
  return new_ptr(*this);
}

inline IBPtr SimpleFlavour::fullclone() const {
  return new_ptr(*this);
}

inline double SimpleFlavour::sSup() const {
  return theSSup;
}

inline double SimpleFlavour::diSup() const {
  return theDiSup;
}

inline double SimpleFlavour::di1Sup() const {
  return theDi1Sup;
}

inline double SimpleFlavour::diSSup() const {
  return theDiSSup;
}

inline double SimpleFlavour::etaSup() const {
  return theEtaSup;
}

inline double SimpleFlavour::etaPSup() const {
  return theEtaPSup;
}

inline double SimpleFlavour::baryon10Sup() const {
  return theBaryon10Sup;
}

inline double SimpleFlavour::pSpin1() const {
  return thePSpin1;
}

inline double SimpleFlavour::pSpinS1() const {
  return thePSpinS1;
}

inline double SimpleFlavour::pSpinC1() const {
  return thePSpinC1;
}

inline void SimpleFlavour::doupdate() throw(UpdateException) {
  FlavourGenerator::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void SimpleFlavour::doinit() throw(InitException) {
  FlavourGenerator::doinit();
  clear();
}

inline void SimpleFlavour::dofinish() {
  FlavourGenerator::dofinish();
}

inline void SimpleFlavour::doinitrun() {
  FlavourGenerator::doinitrun();
  clear();
}

inline void SimpleFlavour::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  FlavourGenerator::rebind(trans);
}

inline IVector SimpleFlavour::getReferences() {
  IVector ret = FlavourGenerator::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
