// -*- C++ -*-
//
// HandlerBase.icc is a part of ThePEG - Toolkit for HEP Event Generation
// Copyright (C) 1999-2007 Leif Lonnblad
//
// ThePEG is licenced under version 2 of the GPL, see COPYING for details.
// Please respect the MCnet academic guidelines, see GUIDELINES for details.
//
//
// This is the implementation of the inlined member functions of
// the HandlerBase class.
//

namespace ThePEG {

template <typename T>
inline double HandlerBaseT<T>::rnd() const {
  return T::rnd();
}

template <typename T>
inline const StandardModelBase & HandlerBaseT<T>::SM() const {
  return *standardModel();
}

template <typename T>
inline tSMPtr HandlerBaseT<T>::standardModel() const {
  return generator()->standardModel();
}

template <typename T>
inline double HandlerBaseT<T>::rnd(double xu) const {
  return T::rnd(xu);
}

template <typename T>
inline double HandlerBaseT<T>::rnd(double xl, double xu) const {
  return T::rnd(xl, xu);
}

template <typename T>
inline bool HandlerBaseT<T>::rndbool() const {
  return T::rndbool();
}

template <typename T>
inline bool HandlerBaseT<T>::rndbool(double p) const {
  return T::rndbool(p);
}

template <typename T>
inline bool HandlerBaseT<T>::rndbool(double p1, double p2) const {
  return T::rndbool(p1, p2);
}

template <typename T>
inline int HandlerBaseT<T>::rndsign(double p1, double p2, double p3) const {
  return T::rndsign(p1, p2, p3);
}

template <typename T>
inline int HandlerBaseT<T>::rnd2(double p0, double p1) const {
  return T::rnd2(p0, p1);
}

template <typename T>
inline int HandlerBaseT<T>::rnd3(double p0, double p1, double p2) const {
  return T::rnd3(p0, p1, p2);
}

template <typename T>
inline int HandlerBaseT<T>::
rnd4(double p0, double p1, double p2, double p3) const {
  return T::rnd4(p0, p1, p2, p3);
}

template <typename T>
inline long HandlerBaseT<T>::irnd(long xu) const {
  return T::irnd(xu);
}

template <typename T>
inline long HandlerBaseT<T>::irnd(long xl, long xu) const {
  return T::irnd(xl, xu);
}

inline void HandlerBase::doupdate() throw(UpdateException) {
  Interfaced::doupdate();
}

inline void HandlerBase::doinit() throw(InitException) {
  Interfaced::doinit();
}

inline void HandlerBase::dofinish() {
  Interfaced::dofinish();
}

inline void HandlerBase::rebind(const TranslationMap & trans)
   throw(RebindException) {
  // dummy = trans.translate(dummy);
  Interfaced::rebind(trans);
}

inline IVector HandlerBase::getReferences() {
  IVector ret = Interfaced::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
