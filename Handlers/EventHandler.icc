// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the EventHandler class.
//

namespace ThePEG {


inline long EventHandler::maxLoop() const {
  return theMaxLoop;
}

inline int EventHandler::statLevel() const {
  return theStatLevel;
}

inline const LuminosityFunction & EventHandler::lumiFn() const {
  return *theLumiFn;
}

inline LuminosityFunction & EventHandler::lumiFn() {
  return *theLumiFn;
}

inline tcLumiFnPtr EventHandler::lumiFnPtr() const {
  return theLumiFn;
}

inline tLumiFnPtr EventHandler::lumiFnPtr() {
  return theLumiFn;
}

inline tCutsPtr EventHandler::cuts() const {
  return theCuts;
}

inline tPExtrPtr EventHandler::partonExtractor() const {
  return thePartonExtractor;
}

inline IBPtr EventHandler::clone() const {
  return new_ptr(*this);
}

inline IBPtr EventHandler::fullclone() const {
  return new_ptr(*this);
}

inline tEventPtr EventHandler::currentEvent() const {
  return theCurrentEvent;
}

inline void EventHandler::currentEvent(tEventPtr e) {
  theCurrentEvent = e;
}

inline tCollPtr EventHandler::currentCollision() const {
  return theCurrentCollision;
}

inline void EventHandler::currentCollision(tCollPtr c) {
  theCurrentCollision = c;
}

inline tStepPtr EventHandler::newStep(tcStepHdlPtr sh) {
  currentStep(currentCollision()->newStep(sh));
  return currentStep();
}

inline void EventHandler::popStep() {
  currentCollision()->popStep();
  currentStep(currentCollision()->finalStep());
}

inline tStepPtr EventHandler::currentStep() const {
  return theCurrentStep;
}

inline void EventHandler::currentStep(tStepPtr s) {
  theCurrentStep = s;
}

inline tStepHdlPtr EventHandler::currentStepHandler() const {
  return theCurrentStepHandler;
}

inline void EventHandler::currentStepHandler(tStepHdlPtr sh) {
  theCurrentStepHandler = sh;
}

inline EventHandler::GroupVector &
EventHandler::groups() {
  return theGroups;
}

inline const EventHandler::GroupVector &
EventHandler::groups() const {
  return theGroups;
}

inline const cPDPair & EventHandler::incoming() const {
  return theIncoming;
}

inline void EventHandler::doupdate() throw(UpdateException) {
  HandlerBase::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void EventHandler::doinit() throw(InitException) {
  HandlerBase::doinit();
}

inline void EventHandler::dofinish() {
  HandlerBase::dofinish();
}

inline void EventHandler::rebind(const TranslationMap & trans)
   throw(RebindException) {
  // dummy = trans.translate(dummy);
  HandlerBase::rebind(trans);
}

inline IVector EventHandler::getReferences() {
  IVector ret = HandlerBase::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}

