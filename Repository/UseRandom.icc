// -*- C++ -*-
//
// UseRandom.icc is a part of ThePEG - Toolkit for HEP Event Generation
// Copyright (C) 1999-2007 Leif Lonnblad
//
// ThePEG is licenced under version 2 of the GPL, see COPYING for details.
// Please respect the MCnet academic guidelines, see GUIDELINES for details.
//
//
// This is the implementation of the inlined member functions of
// the UseRandom class.
//

namespace ThePEG {

inline UseRandom::UseRandom()
  : randomPushed(false) {}

inline UseRandom::UseRandom(const UseRandom &)
  : randomPushed(false) {}

inline UseRandom::UseRandom(const RanGenPtr & r)
  : randomPushed(false) {
  if ( r ) {
    theRandomStack.push_back(r);
    randomPushed = true;
  }
}

inline UseRandom::~UseRandom() {
  if ( randomPushed ) theRandomStack.pop_back();
}

inline RandomGenerator & UseRandom::current() {
  return *theRandomStack.back();
}

// inline RandomEngine * UseRandom::currentEngine() {
//   return &(current().randomGenerator());
// }

inline  double UseRandom::rnd() {
  return current().rnd();
}

inline RandomGenerator::RndVector UseRandom::rndvec(int n) {
  return current().rndvec(n);
}

template <typename Unit>
inline Unit UseRandom::rnd(Unit xu) {
  return current().rnd(xu);
}
  
template <typename Unit>
inline Unit UseRandom::rnd(Unit xl, Unit xu) {
  return current().rnd(xl, xu);
}
 
inline bool UseRandom::rndbool() {
  return rndbool(0.5);
}

inline bool UseRandom::rndbool(double p) {
  return current().rndbool(p);
}

inline bool UseRandom::rndbool(double p1, double p2) {
  return current().rndbool(p1, p2);
}

inline int UseRandom::rndsign(double p1, double p2, double p3) {
  return current().rndsign(p1, p2, p3);
}

inline int UseRandom::rnd2(double p0, double p1) {
  return current().rnd2(p0, p1);
}

inline int UseRandom::rnd3(double p0, double p1, double p2) {
  return current().rnd3(p0, p1, p2);
}

inline int UseRandom::rnd4(double p0, double p1, double p2, double p3) {
  return current().rnd4(p0, p1, p2, p3);
}

inline long UseRandom::irnd(long xu) {
  return long(rnd()*double(xu));
}

inline long UseRandom::irnd(long xl, long xu) {
  return xl + irnd(xu-xl);
}

inline double UseRandom::rndExp() {
  return current().rndExp();
}

template <typename Unit>
inline Unit UseRandom::rndExp(Unit mean) {
  return current().rndExp(mean);
}

inline double UseRandom::rndGauss() {
  return current().rndGauss();
}

template <typename Unit>
inline Unit UseRandom::rndGauss(Unit sigma, Unit mean) {
  return current().rndGauss(sigma, mean);
}

template <typename Unit>
inline Unit UseRandom::rndBW(Unit mean, Unit gamma) {
  return current().rndBW(mean, gamma);
}

template <typename Unit>
inline Unit UseRandom::rndBW(Unit mean, Unit gamma, Unit cut) {
  return current().rndBW(mean, gamma, cut);
}

template <typename Unit>
inline Unit UseRandom::rndRelBW(Unit mean, Unit gamma) {
  return current().rndRelBW(mean, gamma);
}

template <typename Unit>
inline Unit UseRandom::rndRelBW(Unit mean, Unit gamma, Unit cut) {
  return current().rndRelBW(mean, gamma, cut);
}

inline long UseRandom::rndPoisson(double mean, long nmax) {
  return current().rndPoisson(mean, nmax);
}

}
