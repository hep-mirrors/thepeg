// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the RandomGenerator class.
//

namespace ThePEG {

inline double RandomGenerator::rnd() {
  if ( nextNumber == theNumbers.end() ) getFlatNumbers();
  return *nextNumber++;
}

inline RandomGenerator::RndVector RandomGenerator::rndvec(int n) {
  RndVector ret(n);
  for ( int i = 0; i < n; ++i ) ret[i] = rnd();
  return ret;
}

inline double RandomGenerator::operator()() {
  return rnd();
}

inline long RandomGenerator::operator()(long N) {
  return long(rnd()*double(N));
}

template <typename OutputIterator>
inline void RandomGenerator::rnd(OutputIterator o, size_type n) {
  while ( n-- ) *o++ = rnd();
}

inline void RandomGenerator::push_back(double r) {
  if ( r > 0.0 && r < 1.0 && nextNumber != theNumbers.begin() )
    *--nextNumber = r;
}

inline void RandomGenerator::pop_back() {
  if ( nextNumber != theNumbers.end() ) ++nextNumber;
}

inline void RandomGenerator::flush() {
  nextNumber = theNumbers.end();
}

inline bool RandomGenerator::rndbool(double p1, double p2) {
  return rndbool(p1/(p1 + p2));
}

inline int RandomGenerator::rnd2(double p0, double p1) {
  return rndbool(p0, p1)? 0: 1;
}

inline int RandomGenerator::rnd3(double p0, double p1, double p2) {
  return 1 + rndsign(p0, p1, p2);
}

}
