// -*- C++ -*-
//
// EventGenerator.icc is a part of ThePEG - Toolkit for HEP Event Generation
// Copyright (C) 1999-2007 Leif Lonnblad
//
// ThePEG is licenced under version 2 of the GPL, see COPYING for details.
// Please respect the MCnet academic guidelines, see GUIDELINES for details.
//
//
// This is the implementation of the inlined member functions of
// the EventGenerator class.
//

namespace ThePEG {

inline IBPtr EventGenerator::clone() const {
  return new_ptr(*this);
}

inline IBPtr EventGenerator::fullclone() const {
  return new_ptr(*this);
}

inline tSMPtr EventGenerator::standardModel() const {
  return theStandardModel;
}

inline tStrategyPtr EventGenerator::strategy() const {
  return theStrategy;
}

inline const ObjectSet & EventGenerator::used() const {
  return usedObjects;
}

inline void EventGenerator::setSeed(long seed) {
  random().setSeed(seed);
}

inline RandomGenerator & EventGenerator::random() const {
  return *theRandom;
}

inline const vector<IPtr> & EventGenerator::defaultObjects() const {
  return theDefaultObjects;
}

inline ParticleMap & EventGenerator::localParticles() {
  return theLocalParticles;
}

inline const ParticleMap & EventGenerator::localParticles() const {
  return theLocalParticles;
}

inline string EventGenerator::runName() const {
  return theRunName.size()? theRunName: name();
}

inline string EventGenerator::path() const {
  return thePath;
}

inline string EventGenerator::filename() const {
  return path() + "/" + runName();
}

inline void EventGenerator::path(string f) {
  thePath = f;
}

inline void EventGenerator::runName(string f) {
  theRunName = f;
}

inline ofstream & EventGenerator::outfile() {
  return theOutfile;
}

inline ofstream & EventGenerator::logfile() {
  return theLogfile;
}

inline ofstream & EventGenerator::reffile() {
  return theReffile;
}

inline long EventGenerator::N() const {
  return theNumberOfEvents;
}

inline long EventGenerator::currentEventNumber() const {
  return ieve;
}

inline double EventGenerator::sumWeights() const {
  return weightSum;
}

inline void EventGenerator::N(long n) {
  theNumberOfEvents = n;
}

inline const ObjectSet & EventGenerator::objects() const {
  return theObjects;
}

inline ObjectSet & EventGenerator::objects() {
  return theObjects;
}

inline const ObjectMap & EventGenerator::objectMap() const {
  return theObjectMap;
}

inline ObjectMap & EventGenerator::objectMap() {
  return theObjectMap;
}

template <typename T>
inline typename Ptr<T>::pointer EventGenerator::getObject(string name) const {
  return dynamic_ptr_cast<typename Ptr<T>::pointer>(getPointer(name));
}

inline const MatcherSet & EventGenerator::matchers() const {
  return theMatchers;
}

inline const ParticleMap & EventGenerator::particles() const {
  return theParticles;
}

inline tEHPtr EventGenerator::currentEventHandler() const {
  return theCurrentEventHandler;
}

inline void EventGenerator::currentEventHandler(tEHPtr eh) {
  theCurrentEventHandler = eh;
}

inline tStepHdlPtr EventGenerator::currentStepHandler() const {
  return theCurrentStepHandler;
}

inline void EventGenerator::currentStepHandler(tStepHdlPtr sh) {
  theCurrentStepHandler = sh;
}

inline tEHPtr EventGenerator::eventHandler() const {
  return theEventHandler;
}

inline AnalysisVector & EventGenerator::analysisHandlers() {
  return theAnalysisHandlers;
}

inline tHistFacPtr EventGenerator::histogramFactory() const {
  return theHistogramFactory;
}

inline tEvtManipPtr EventGenerator::manipulator() const {
  return theEventManipulator;
}

inline void EventGenerator::doupdate() throw(UpdateException) {
  Interfaced::doupdate();
}

}
