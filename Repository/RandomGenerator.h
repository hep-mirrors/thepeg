// -*- C++ -*-
#ifndef ThePEG_RandomGenerator_H
#define ThePEG_RandomGenerator_H
//
// This is the declaration of the <!id>RandomGenerator<!!id> class.
//
// CLASSDOC SUBSECTION Description:
//
// <!id>RandomGenerator<!!id> is an interface to the CLHEP random
// engine class. To avoid excessive virtual function calls, the
// <!id>RandomGenerator<!!id> caches random numbers generated by the
// engine which are then retrieved by the non-virtual inlined
// <!id>rnd()<!!id> method.
//
// Sub-classes of <!id>RandomGenerator<!!id> should be used to
// implement a particular random engine.
//
// <!id>RandomGenerator<!!id> only provides a flat distribution
// between 0 and 1. Any other distribution can be achieved using the
// CLHEP random classes using the engine returned from the
// <!id>randomGenerator()<!!id> method.
//

#include "ThePEG/Config/ThePEG.h"
// #include "RandomGenerator.fh"
// #include "RandomGenerator.xh"
#include "ThePEG/Interface/Interfaced.h"
#include "ThePEG/CLHEPWrap/RandomEngine.fh"

namespace ThePEG {

class RandomGenerator: public Interfaced {

public:

  typedef vector<double> RndVector;
  typedef RndVector::size_type size_type;

public:

  RandomGenerator();
  RandomGenerator(const RandomGenerator &);
  virtual ~RandomGenerator();
  // Standard ctors and dtor

  virtual RandomEngine & randomGenerator() = 0;
  // Return a reference to the underlying CLHEP random engine.

  virtual void setSeed(long seed) = 0;
  // Reset the underlying CLHEP random engine with the given seed.

  inline double rnd();
  inline double operator()();
  // Return a (cached) random number between 0 and 1.

  bool rndbool(double p);
  // Return a true with probability p.

  inline bool rndbool(double p1, double p2);
  // Return a true with probability p1/(p1+p2).

  int rndsign(double p1, double p2, double p3);
  // Return -1, 0, or 1 with relative probabilities p1, p2, p3.

  inline int rnd2(double p0, double p1);
  inline int rnd3(double p0, double p1, double p2);
  int rnd4(double p0, double p1, double p2, double p3);
  // Return a i with probability p_i/sum(p_i).

  inline void push_back(double r);
  // Give back a partly unused random number.

  inline void pop_back();
  // Discard the next random number in the cache.

  inline void flush();
  // Discard all random numbers in the cache. Typically used after the
  // internal random engine has been reinitialized for some reason.

  template <typename OutputIterator>
  inline void rnd(OutputIterator, size_type n);
  // Generate n random numbers between 0 and 1 and put them in the
  // output iterator.

protected:

  virtual void doinit() throw (InitException);
  // Initializes this random generator. This should be done first of
  // all before the initialization of any other object associated with
  // an event generator.

public:

  void persistentOutput(PersistentOStream &) const;
  void persistentInput(PersistentIStream &, int);
  // Standard functions for writing and reading from persistent streams.

  static void Init();
  // Standard Init function used to initialize the interface.

private:

  void setSize(size_type newSize);
  // Utility function for the interface.

  virtual void getFlatNumbers();
  // Fill the cache with random numbers.

  RndVector theNumbers;
  // A vector of cached numbers.

  RndVector::iterator nextNumber;
  // Iterator pointing to the next number to be extracted

  size_type theSize;
  // The size of the cache.

  long theSeed;
  // The seed to initialize the random generator with.

private:

  static ClassDescription<RandomGenerator> initRandomGenerator;

  RandomGenerator & operator=(const RandomGenerator &);
  //  Private and non-existent assignment operator.

};

template <>
struct BaseClassTrait<RandomGenerator,1> {
  typedef Interfaced NthBase;
};

template <>
struct ClassTraits<RandomGenerator>:
    public ClassTraitsBase<RandomGenerator> {
  static string className() {
    return "/ThePEG/RandomGenerator";
  }
  static TPtr create() {
    throw std::logic_error("Tried to instantiate virtual class "
			   "'/Pythis7/RandomGenerator'");
    return TPtr();
  }
};

}

#include "RandomGenerator.icc"
#ifndef ThePEG_TEMPLATES_IN_CC_FILE
// #include "RandomGenerator.tcc"
#endif

#endif /* ThePEG_RandomGenerator_H */
