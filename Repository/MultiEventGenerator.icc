// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the MultiEventGenerator class.
//

namespace ThePEG {

inline MultiEventGenerator::MultiEventGenerator() {}

inline MultiEventGenerator::MultiEventGenerator(const MultiEventGenerator & x)
  : FullEventGenerator(x), theObjects(x.theObjects),
    theInterfaces(x.theInterfaces), thePosArgs(x.thePosArgs),
    theValues(x.theValues) {}

inline IBPtr MultiEventGenerator::clone() const {
  return new_ptr(*this);
}

inline IBPtr MultiEventGenerator::fullclone() const {
  return new_ptr(*this);
}

inline void MultiEventGenerator::doupdate() throw(UpdateException) {
  FullEventGenerator::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void MultiEventGenerator::doinit() throw(InitException) {
  FullEventGenerator::doinit();
}

inline void MultiEventGenerator::doinitrun() {
  FullEventGenerator::doinitrun();
}

inline void MultiEventGenerator::dofinish() {
  FullEventGenerator::dofinish();
}

inline IVector MultiEventGenerator::getReferences() {
  IVector ret = FullEventGenerator::getReferences();
  ret.insert(ret.end(), theObjects.begin(), theObjects.end());
  return ret;
}

}
