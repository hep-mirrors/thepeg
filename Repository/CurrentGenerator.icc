// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the CurrentGenerator class.
//

namespace ThePEG {

inline CurrentGenerator::CurrentGenerator()
  : generatorPushed(false) {}

inline CurrentGenerator::CurrentGenerator(const CurrentGenerator &)
  : generatorPushed(false) {}

inline CurrentGenerator::CurrentGenerator(const EGPtr & eg)
  : generatorPushed(false) {
  if ( eg ) {
    theGeneratorStack.push_back(eg);
    generatorPushed = true;
  }
}

inline CurrentGenerator::~CurrentGenerator() {
  if ( generatorPushed ) theGeneratorStack.pop_back();
}

inline bool CurrentGenerator::isVoid() {
  return theGeneratorStack.empty() || !(theGeneratorStack.back());
}

inline EventGenerator & CurrentGenerator::current() {
  return *theGeneratorStack.back();
}

inline tSMPtr CurrentGenerator::standardModel() {
  return current().standardModel();
}

inline tStrategyPtr CurrentGenerator::strategy() {
  return current().strategy();
}

inline ostream & CurrentGenerator::out() {
  return current().out();
}

inline ostream & CurrentGenerator::log() {
  return current().log();
}

inline ostream & CurrentGenerator::ref() {
  return current().ref();
}

template <typename T>
inline typename Ptr<T>::pointer CurrentGenerator::getPtr(const T & t) {
  return current().getPtr(t);
}

inline IBPtr CurrentGenerator::getPointer(string name) {
  return current().getPointer(name);
}

template <typename T>
inline typename Ptr<T>::pointer CurrentGenerator::getObject(string name) {
  return current().getObject<T>(name);
}

template <typename T>
inline typename Ptr<T>::pointer CurrentGenerator::getDefault() {
  return current().getDefault<T>();
}

inline RandomGenerator & CurrentGenerator::random() {
  return current().random();
}

inline RandomEngine & CurrentGenerator::randomEngine() {
  return current().randomEngine();
}

}
