// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the MatcherBase class.
//

namespace ThePEG {

inline bool MatcherBase::checkp(const Particle & p) const {
  return check(p.data());
}

inline bool MatcherBase::matches(const Particle & p) const {
  return matches(p.data());
}

inline bool MatcherBase::matches(const ParticleData & pd) const {
  return member(matchingParticles, PDPtr(const_cast<ParticleData *>(&pd)));
}

inline bool MatcherBase::matches(const MatcherBase & pm) const {
  return member(matchingMatchers, PMPtr(const_cast<MatcherBase *>(&pm)));
}

inline const MatcherBase::tPDSet & MatcherBase::particles() const {
  return matchingParticles;
}

inline const MatcherBase::tPMSet & MatcherBase::matchers() const {
  return matchingMatchers;
}

inline Energy MatcherBase::mass() const {
  return commonMass;
}

inline Energy MatcherBase::minMass() const {
  return theMinMass;
}

inline Energy MatcherBase::maxMass() const {
  return theMaxMass;
}

inline Energy MatcherBase::width() const {
  return commonWidth;
}

inline Length MatcherBase::cTau() const {
  return commonCTau;
}

inline PDT::Charge MatcherBase::iCharge() const {
  return commonCharge;
}

inline bool MatcherBase::charged() const {
  return PDT::charged(commonCharge);
}

inline bool MatcherBase::positive() const {
  return PDT::positive(commonCharge);
}

inline bool MatcherBase::negative() const {
  return PDT::negative(commonCharge);
}

inline PDT::Spin MatcherBase::iSpin() const {
  return commonSpin;
}

inline PDT::Color MatcherBase::iColor() const {
  return commonColor;
}

inline bool MatcherBase::colored() const {
  return PDT::colored(commonColor);
}

inline int MatcherBase::stable() const {
  return commonStable;
}

inline void MatcherBase::setCC(tPMPtr pm, tPMPtr apm) const {
  pm->theAntiPartner = apm;
  apm->theAntiPartner = pm;
}  

inline tPMPtr MatcherBase::CC() const {
  return theAntiPartner;
}

template <typename Iterator>
inline void MatcherBase::addPIfMatch(Iterator first, Iterator last) {
  for ( ; first != last; ++first ) addPIfMatch(*first);
}

template <typename Iterator>
inline void MatcherBase::addMIfMatch(Iterator first, Iterator last) {
  for ( ; first != last; ++first ) addMIfMatch(*first);
}

template <typename Cont>
inline void MatcherBase::addPIfMatchFrom(const Cont & c) {
  addPIfMatch(c.begin(), c.end());
}

template <typename Cont>
inline void MatcherBase::addMIfMatchFrom(const Cont & c) {
  addMIfMatch(c.begin(), c.end());
}

inline void MatcherBase::doinit() throw(InitException) {
  Interfaced::doinit();
}

inline void MatcherBase::dofinish() {
  Interfaced::dofinish();
}

}

