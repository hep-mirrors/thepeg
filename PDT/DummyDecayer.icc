// -*- C++ -*-
//
// DummyDecayer.icc is a part of ThePEG - Toolkit for HEP Event Generation
// Copyright (C) 1999-2007 Leif Lonnblad
//
// ThePEG is licenced under version 2 of the GPL, see COPYING for details.
// Please respect the MCnet academic guidelines, see GUIDELINES for details.
//
//
// This is the implementation of the inlined member functions of
// the DummyDecayer class.
//

namespace ThePEG {

inline DummyDecayer::DummyDecayer() {}

inline DummyDecayer::DummyDecayer(const DummyDecayer & x)
  : Decayer(x) {}

inline IBPtr DummyDecayer::clone() const {
  return new_ptr(*this);
}

inline IBPtr DummyDecayer::fullclone() const {
  return new_ptr(*this);
}

inline void DummyDecayer::doupdate() throw(UpdateException) {
  Decayer::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void DummyDecayer::doinit() throw(InitException) {
  Decayer::doinit();
}

inline void DummyDecayer::dofinish() {
  Decayer::dofinish();
}

inline void DummyDecayer::doinitrun() {
  Decayer::doinitrun();
}

inline void DummyDecayer::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  Decayer::rebind(trans);
}

inline IVector DummyDecayer::getReferences() {
  IVector ret = Decayer::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
