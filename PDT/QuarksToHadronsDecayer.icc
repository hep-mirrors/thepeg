// -*- C++ -*-
//
// QuarksToHadronsDecayer.icc is a part of ThePEG - Toolkit for HEP Event Generation
// Copyright (C) 1999-2007 Leif Lonnblad
//
// ThePEG is licenced under version 2 of the GPL, see COPYING for details.
// Please respect the MCnet academic guidelines, see GUIDELINES for details.
//
//
// This is the implementation of the inlined member functions of
// the QuarksToHadronsDecayer class.
//

namespace ThePEG {

inline QuarksToHadronsDecayer::QuarksToHadronsDecayer()
  : theFixedN(0), theMinN(2), theC1(4.5), theC2(0.7*GeV), theC3(0.0) {}

inline QuarksToHadronsDecayer::QuarksToHadronsDecayer(const QuarksToHadronsDecayer & x)
  : Decayer(x), theFixedN(x.theFixedN), theMinN(x.theMinN), theC1(x.theC1),
    theC2(x.theC2), theC3(x.theC3),
    theFlavourGenerator(x.theFlavourGenerator) {}

inline IBPtr QuarksToHadronsDecayer::clone() const {
  return new_ptr(*this);
}

inline IBPtr QuarksToHadronsDecayer::fullclone() const {
  return new_ptr(*this);
}

inline int QuarksToHadronsDecayer::fixedN() const {
  return theFixedN;
}

inline int QuarksToHadronsDecayer::minN() const {
  return theMinN;
}

inline double QuarksToHadronsDecayer::c1() const {
  return theC1;
}

inline Energy QuarksToHadronsDecayer::c2() const {
  return theC2;
}

inline double QuarksToHadronsDecayer::c3() const {
  return theC3;
}

inline tcFlavGenPtr QuarksToHadronsDecayer::flavourGenerator() const {
  return theFlavourGenerator;
}

inline void QuarksToHadronsDecayer::doupdate() throw(UpdateException) {
  Decayer::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void QuarksToHadronsDecayer::doinit() throw(InitException) {
  Decayer::doinit();
}

inline void QuarksToHadronsDecayer::dofinish() {
  Decayer::dofinish();
}

inline void QuarksToHadronsDecayer::doinitrun() {
  Decayer::doinitrun();
}

inline void QuarksToHadronsDecayer::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  Decayer::rebind(trans);
}

inline IVector QuarksToHadronsDecayer::getReferences() {
  IVector ret = Decayer::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
