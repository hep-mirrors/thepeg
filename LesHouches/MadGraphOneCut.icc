// -*- C++ -*-
//
// MadGraphOneCut.icc is a part of ThePEG - Toolkit for HEP Event Generation
// Copyright (C) 1999-2007 Leif Lonnblad
//
// ThePEG is licenced under version 2 of the GPL, see COPYING for details.
// Please respect the MCnet academic guidelines, see GUIDELINES for details.
//
//
// This is the implementation of the inlined member functions of
// the MadGraphOneCut class.
//

namespace ThePEG {

inline MadGraphOneCut::MadGraphOneCut()
  : cutType(PT), particleType(JET), theCut(0.0) {}

inline MadGraphOneCut::MadGraphOneCut(CutType t, PType p, double c)
  : cutType(t), particleType(p), theCut(c) {}

inline MadGraphOneCut::MadGraphOneCut(const MadGraphOneCut & x)
  : OneCutBase(x), cutType(x.cutType), particleType(x.particleType),
    theCut(x.theCut) {}

inline IBPtr MadGraphOneCut::clone() const {
  return new_ptr(*this);
}

inline IBPtr MadGraphOneCut::fullclone() const {
  return new_ptr(*this);
}

inline void MadGraphOneCut::doupdate() throw(UpdateException) {
  OneCutBase::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void MadGraphOneCut::doinit() throw(InitException) {
  OneCutBase::doinit();
}

inline void MadGraphOneCut::dofinish() {
  OneCutBase::dofinish();
}

inline void MadGraphOneCut::doinitrun() {
  OneCutBase::doinitrun();
}

inline void MadGraphOneCut::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  OneCutBase::rebind(trans);
}

inline IVector MadGraphOneCut::getReferences() {
  IVector ret = OneCutBase::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
