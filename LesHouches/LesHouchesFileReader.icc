// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the LesHouchesFileReader class.
//

namespace ThePEG {

inline LesHouchesFileReader::LesHouchesFileReader()
  : neve(0), ieve(0), theFile(NULL) {}

inline LesHouchesFileReader::
LesHouchesFileReader(const LesHouchesFileReader & x)
  : LesHouchesReader(x), neve(x.neve), ieve(0),
    LHFVersion(x.LHFVersion), outsideBlock(x.outsideBlock),
    headerBlock(x.headerBlock), initComments(x.initComments),
    initAttributes(x.initAttributes), eventComments(x.eventComments),
    eventAttributes(x.eventAttributes),
    theFile(NULL), theFileName(x.theFileName) {}

inline string LesHouchesFileReader::filename() const {
  return theFileName;
}

inline FILE * LesHouchesFileReader::file() {
  return theFile;
}

inline void LesHouchesFileReader::doupdate() throw(UpdateException) {
  LesHouchesReader::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void LesHouchesFileReader::doinit() throw(InitException) {
  LesHouchesReader::doinit();
}

inline void LesHouchesFileReader::dofinish() {
  LesHouchesReader::dofinish();
}

inline void LesHouchesFileReader::doinitrun() {
  LesHouchesReader::doinitrun();
}

inline void LesHouchesFileReader::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  LesHouchesReader::rebind(trans);
}

inline IVector LesHouchesFileReader::getReferences() {
  IVector ret = LesHouchesReader::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
