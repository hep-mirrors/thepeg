// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the LesHouchesReader class.
//

namespace ThePEG {

inline void LesHouchesReader::doupdate() throw(UpdateException) {
  HandlerBase::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void LesHouchesReader::dofinish() {
  close();
  HandlerBase::dofinish();
}

inline void LesHouchesReader::doinitrun() {
  HandlerBase::doinitrun();
  theNAttempted = theNAccepted = 0;
  theAttemptMap.clear();
  theAcceptMap.clear();
  open();
  if ( cacheFileName().length() ) openReadCacheFile();
}

inline void LesHouchesReader::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  HandlerBase::rebind(trans);
}

inline IVector LesHouchesReader::getReferences() {
  IVector ret = HandlerBase::getReferences();
  // ret.push_back(dummy);
  return ret;
}

inline CrossSection LesHouchesReader::xSec() const {
  return theXSec;
}

inline double LesHouchesReader::maxWeight() const {
  return theMaxWeight;
}

inline long LesHouchesReader::NEvents() const {
  return theNEvents;
}

inline long LesHouchesReader::maxScan() const {
  return theMaxScan;
}

inline const PPair & LesHouchesReader::beams() const {
  return theBeams;
}

inline const PPair & LesHouchesReader::incoming() const {
  return theIncoming;
}

inline const PVector & LesHouchesReader::outgoing() const {
  return theOutgoing;
}

inline const PVector & LesHouchesReader::intermediates() const {
  return theIntermediates;
}

inline bool LesHouchesReader::weighted() const {
  return isWeighted;
}

inline void LesHouchesReader::weighted(bool x) {
  isWeighted = x;
}

inline CrossSection LesHouchesReader::maxXSec() const {
  return theMaxXSec;
}

inline void LesHouchesReader::maxXSec(CrossSection x) {
  theMaxXSec = x;
}

inline void LesHouchesReader::xSec(CrossSection x) {
  theXSec = x;
}

inline void LesHouchesReader::NEvents(long x) {
  theNEvents = x;
}

inline void LesHouchesReader::maxWeight(double x) {
  theMaxWeight = x;
}

inline bool LesHouchesReader::negativeWeights() const {
  return hasNegativeWeights;
}

inline void LesHouchesReader::negativeWeights(bool x) {
  hasNegativeWeights = x;
}

inline string LesHouchesReader::cacheFileName() const {
  return theCacheFileName;
}

inline bool LesHouchesReader::randomize() const {
  return doRandomize;
}

inline size_t LesHouchesReader::eventSize(int N) {
  return (N + 1)*sizeof(int) +       // IDPRUP, ISTUP
    (7*N + 4)*sizeof(double) +       // XWGTUP, SCALUP, AQEDUP, AQCDUP, PUP,
                                     // VTIMUP, SPINUP
    N*sizeof(long) +                 // IDUP
    (2*N + 1)*sizeof(pair<int,int>); // MOTHUP, ICOLUP. XPDWUP
}

inline FILE * LesHouchesReader::cacheFile() const {
  return theCacheFile;
}

inline bool LesHouchesReader::compressedCache() const {
#ifdef ThePEG_GZREAD_FILE
#ifdef ThePEG_GZWRITE_FILE
  return cacheFileName().substr(cacheFileName().length()-3,3) == ".gz";
#else
  return false;
#endif
#else
  return false;
#endif
}

template <typename T>
char * LesHouchesReader::mwrite(char * pos, const T & t, size_t n) {
  memcpy(pos, &t, n*sizeof(T));
  return pos + n*sizeof(T);
}

template <typename T>
const char * LesHouchesReader::mread(const char * pos, T & t, size_t n) {
  memcpy(&t, pos, n*sizeof(T));
  return pos + n*sizeof(T);
}

inline long LesHouchesReader::nAttempted() const {
  return theNAttempted;
}

inline long LesHouchesReader::nAccepted() const {
  return theNAccepted;
}

inline const LesHouchesReader::CountMap &
LesHouchesReader::attemptMap() const {
  return theAttemptMap;
}

inline void LesHouchesReader::accept() {
  ++theNAccepted;
  ++theAcceptMap[IDPRUP];
}

inline const LesHouchesReader::CountMap &
LesHouchesReader::acceptMap() const {
  return theAcceptMap;
}

inline tPExtrPtr LesHouchesReader::partonExtractor() const {
  return thePartonExtractor;
}

inline const PartonPairVec & LesHouchesReader::partonBins() const {
  return thePartonBins;
}

inline const KinematicalCuts & LesHouchesReader::cuts() const {
  return *theCuts;
}

}
