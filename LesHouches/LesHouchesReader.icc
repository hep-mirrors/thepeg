// -*- C++ -*-
//
// LesHouchesReader.icc is a part of ThePEG - Toolkit for HEP Event Generation
// Copyright (C) 1999-2007 Leif Lonnblad
//
// ThePEG is licenced under version 2 of the GPL, see COPYING for details.
// Please respect the MCnet academic guidelines, see GUIDELINES for details.
//
//
// This is the implementation of the inlined member functions of
// the LesHouchesReader class.
//

namespace ThePEG {

inline void LesHouchesReader::doupdate() throw(UpdateException) {
  HandlerBase::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void LesHouchesReader::dofinish() {
  close();
  HandlerBase::dofinish();
}

inline void LesHouchesReader::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  HandlerBase::rebind(trans);
}

inline IVector LesHouchesReader::getReferences() {
  IVector ret = HandlerBase::getReferences();
  // ret.push_back(dummy);
  return ret;
}

inline long LesHouchesReader::NEvents() const {
  return theNEvents;
}

inline long LesHouchesReader::currentPosition() const {
  return position;
}

inline long LesHouchesReader::maxScan() const {
  return theMaxScan;
}

inline const PPair & LesHouchesReader::beams() const {
  return theBeams;
}

inline const PPair & LesHouchesReader::incoming() const {
  return theIncoming;
}

inline const PVector & LesHouchesReader::outgoing() const {
  return theOutgoing;
}

inline const PVector & LesHouchesReader::intermediates() const {
  return theIntermediates;
}

inline bool LesHouchesReader::active() const {
  return isActive;
}

inline bool LesHouchesReader::weighted() const {
  return isWeighted;
}

inline void LesHouchesReader::weighted(bool x) {
  isWeighted = x;
}

inline void LesHouchesReader::NEvents(long x) {
  theNEvents = x;
}

inline bool LesHouchesReader::negativeWeights() const {
  return hasNegativeWeights;
}

inline void LesHouchesReader::negativeWeights(bool x) {
  hasNegativeWeights = x;
}

inline string LesHouchesReader::cacheFileName() const {
  return theCacheFileName;
}

inline size_t LesHouchesReader::eventSize(int N) {
  return (N + 1)*sizeof(int) +       // IDPRUP, ISTUP
    (7*N + 4)*sizeof(double) +       // XWGTUP, SCALUP, AQEDUP, AQCDUP, PUP,
                                     // VTIMUP, SPINUP
    N*sizeof(long) +                 // IDUP
    2*N*sizeof(pair<int,int>) +      // MOTHUP, ICOLUP
    sizeof(pair<double,double>) +    // XPDWUP.
    sizeof(double);                  // lastweight
}

inline FILE * LesHouchesReader::cacheFile() const {
  return theCacheFile;
}

template <typename T>
char * LesHouchesReader::mwrite(char * pos, const T & t, size_t n) {
  memcpy(pos, &t, n*sizeof(T));
  return pos + n*sizeof(T);
}

template <typename T>
const char * LesHouchesReader::mread(const char * pos, T & t, size_t n) {
  memcpy(&t, pos, n*sizeof(T));
  return pos + n*sizeof(T);
}

inline const LesHouchesReader::StatMap &
LesHouchesReader::processStats() const {
  return statmap;
}

inline const XSecStat &
LesHouchesReader::xSecStats() const {
  return stats;
}

inline void LesHouchesReader::select(double weight) {
  stats.select(weight);
  statmap[hepeup.IDPRUP].select(weight);
}

inline void LesHouchesReader::accept() {
  stats.accept();
  statmap[hepeup.IDPRUP].accept();
}

inline void LesHouchesReader::reject() {
  stats.reject();
  statmap[hepeup.IDPRUP].reject();
}

inline tPExtrPtr LesHouchesReader::partonExtractor() const {
  return thePartonExtractor;
}

inline tCascHdlPtr LesHouchesReader::CKKWHandler() const {
  return theCKKW;
}

inline const PartonPairVec & LesHouchesReader::partonBins() const {
  return thePartonBins;
}

inline const Cuts & LesHouchesReader::cuts() const {
  return *theCuts;
}

inline const PBIPair & LesHouchesReader::partonBinInstances() const {
  return thePartonBinInstances;
}

inline LesHouchesReader::XCombMap & LesHouchesReader::xCombs() {
  return theXCombs;
}

inline const LesHouchesReader::XCombMap & LesHouchesReader::xCombs() const {
  return theXCombs;
}

inline int LesHouchesReader::maxMultCKKW() const {
  return theMaxMultCKKW;
}

inline int LesHouchesReader::minMultCKKW() const {
  return theMinMultCKKW;
}

}
