// -*- C++ -*-
//
// LesHouchesEventHandler.icc is a part of ThePEG - Toolkit for HEP Event Generation
// Copyright (C) 1999-2007 Leif Lonnblad
//
// ThePEG is licenced under version 2 of the GPL, see COPYING for details.
// Please respect the MCnet academic guidelines, see GUIDELINES for details.
//
//
// This is the implementation of the inlined member functions of
// the LesHouchesEventHandler class.
//

namespace ThePEG {

inline LesHouchesEventHandler::LesHouchesEventHandler()
  : theWeightOption(unitweight), theUnitTolerance(1.0e-6), warnPNum(true) {
  selector().tolerance(unitTolerance());
}

inline LesHouchesEventHandler::
LesHouchesEventHandler(const LesHouchesEventHandler & x)
  : EventHandler(x), stats(x.stats), histStats(x.histStats),
    theReaders(x.theReaders), theSelector(x.theSelector),
    theWeightOption(x.theWeightOption), theUnitTolerance(x.theUnitTolerance),
    theCurrentReader(x.theCurrentReader), warnPNum(x.warnPNum) {}

inline IBPtr LesHouchesEventHandler::clone() const {
  return new_ptr(*this);
}

inline IBPtr LesHouchesEventHandler::fullclone() const {
  return new_ptr(*this);
}

inline const LesHouchesEventHandler::ReaderVector &
LesHouchesEventHandler::readers() const {
  return theReaders;
}

inline LesHouchesEventHandler::ReaderVector & LesHouchesEventHandler::readers() {
  return theReaders;
}

inline void LesHouchesEventHandler::doupdate() throw(UpdateException) {
  EventHandler::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void LesHouchesEventHandler::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  EventHandler::rebind(trans);
}

inline IVector LesHouchesEventHandler::getReferences() {
  IVector ret = EventHandler::getReferences();
  // ret.push_back(dummy);
  return ret;
}

inline const LesHouchesEventHandler::ReaderSelector &
LesHouchesEventHandler::selector() const {
  return theSelector;
}

inline LesHouchesEventHandler::ReaderSelector &
LesHouchesEventHandler::selector() {
  return theSelector;
}

inline LesHouchesEventHandler::WeightOpt
LesHouchesEventHandler::weightOption() const {
  return theWeightOption;
}

inline double LesHouchesEventHandler::unitTolerance() const {
  return theUnitTolerance;
}

inline tLesHouchesReaderPtr LesHouchesEventHandler::currentReader() const {
  return theCurrentReader;
}

inline void LesHouchesEventHandler::currentReader(tLesHouchesReaderPtr x) {
  theCurrentReader = x;
}

}
