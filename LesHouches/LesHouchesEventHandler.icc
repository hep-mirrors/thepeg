// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the LesHouchesEventHandler class.
//

namespace ThePEG {

inline LesHouchesEventHandler::LesHouchesEventHandler()
  : theNAttempted(0), theWeightOption(unitweight) {}

inline LesHouchesEventHandler::
LesHouchesEventHandler(const LesHouchesEventHandler & x)
  : EventHandler(x), theReaders(x.theReaders), theNAttempted(x.theNAttempted),
    theAccepted(x.theAccepted), theSelector(x.theSelector),
    theWeightOption(x.theWeightOption) {}

inline IBPtr LesHouchesEventHandler::clone() const {
  return new_ptr(*this);
}

inline IBPtr LesHouchesEventHandler::fullclone() const {
  return new_ptr(*this);
}

inline const LesHouchesEventHandler::ReaderVector &
LesHouchesEventHandler::readers() const {
  return theReaders;
}

inline LesHouchesEventHandler::ReaderVector & LesHouchesEventHandler::readers() {
  return theReaders;
}

inline void LesHouchesEventHandler::doupdate() throw(UpdateException) {
  PartialCollisionHandler::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void LesHouchesEventHandler::dofinish() {
  PartialCollisionHandler::dofinish();
}

inline void LesHouchesEventHandler::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  EventHandler::rebind(trans);
}

inline IVector LesHouchesEventHandler::getReferences() {
  IVector ret = EventHandler::getReferences();
  // ret.push_back(dummy);
  return ret;
}

inline long LesHouchesEventHandler::NAttempted() const {
  return theNAttempted;
}

inline void LesHouchesEventHandler::NAttempted(long x) {
  theNAttempted = x;
}

inline void LesHouchesEventHandler::newAttempt() {
  ++theNAttempted;
}

inline const LesHouchesEventHandler::AcceptVector &
LesHouchesEventHandler::accepted() const {
  return theAccepted;
}

inline LesHouchesEventHandler::AcceptVector &
LesHouchesEventHandler::accepted() {
  return theAccepted;
}

inline const LesHouchesEventHandler::ReaderSelector &
LesHouchesEventHandler::selector() const {
  return theSelector;
}

inline LesHouchesEventHandler::ReaderSelector &
LesHouchesEventHandler::selector() {
  return theSelector;
}

inline LesHouchesEventHandler::WeightOpt
LesHouchesEventHandler::weightOption() const {
  return theWeightOption;
}

}
