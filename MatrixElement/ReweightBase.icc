// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the ReweightBase class.
//

namespace ThePEG {

inline ReweightBase::ReweightBase() {}

inline ReweightBase::ReweightBase(const ReweightBase & x)
  : HandlerBase(x), theLastSHat(x.theLastSHat), theLastInData(x.theLastInData),
    theLastOutData(x.theLastOutData), theLastInMomentumA(x.theLastInMomentumA),
    theLastInMomentumB(x.theLastInMomentumB),
    theLastOutMomentum(x.theLastOutMomentum) {}

inline void ReweightBase::setKinematics() {}

inline void ReweightBase::setKinematics(const SubProcess & sub) {
  setKinematics(tPPair(sub.incoming()), sub.outgoing());
}

inline Energy2 ReweightBase::sHat() const {
  return theLastSHat;
}

inline const cPDPair & ReweightBase::inData() const {
  return theLastInData;
}

inline const cPDVector & ReweightBase::outData() const {
  return theLastOutData;
}

inline const Lorentz5Momentum & ReweightBase::inMomentumA() const {
  return theLastInMomentumA;
}

inline const Lorentz5Momentum & ReweightBase::inMomentumB() const {
  return theLastInMomentumB;
}

inline const vector<Lorentz5Momentum> & ReweightBase::outMomentum() const {
  return theLastOutMomentum;
}

inline void ReweightBase::doupdate() throw(UpdateException) {
  HandlerBase::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void ReweightBase::doinit() throw(InitException) {
  HandlerBase::doinit();
}

inline void ReweightBase::dofinish() {
  HandlerBase::dofinish();
}

inline void ReweightBase::rebind(const TranslationMap & trans)
  throw(RebindException) {
  HandlerBase::rebind(trans);
}

inline IVector ReweightBase::getReferences() {
  IVector ret = HandlerBase::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
