// -*- C++ -*-
//
// ME2to2Base.icc is a part of ThePEG - Toolkit for HEP Event Generation
// Copyright (C) 1999-2007 Leif Lonnblad
//
// ThePEG is licenced under version 2 of the GPL, see COPYING for details.
// Please respect the MCnet academic guidelines, see GUIDELINES for details.
//
//
// This is the implementation of the inlined member functions of
// the ME2to2Base class.
//

namespace ThePEG {

inline ME2to2Base::ME2to2Base()
  : theScaleChoice(0), theLastTHat(0.0*GeV2), theLastUHat(0.0*GeV2),
    theLastPhi(0.0) {}

inline ME2to2Base::ME2to2Base(const ME2to2Base & x)
  : MEBase(x), theScaleChoice(x.theScaleChoice), theLastTHat(x.theLastTHat),
    theLastUHat(x.theLastUHat), theLastPhi(x.theLastPhi) {}

inline int ME2to2Base::scaleChoice() const {
  return theScaleChoice;
}

inline Energy2 ME2to2Base::tHat() const {
  return theLastTHat;
}

inline Energy2 ME2to2Base::uHat() const {
  return theLastUHat;
}

inline double ME2to2Base::phi() const {
  return theLastPhi;
}

inline void ME2to2Base::tHat(Energy2 input) {
  theLastTHat=input;
}

inline void ME2to2Base::uHat(Energy2 input) {
  theLastUHat=input;
}

inline void ME2to2Base::phi(double input) {
  theLastPhi=input;
}

inline void ME2to2Base::doupdate() throw(UpdateException) {
  MEBase::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void ME2to2Base::doinit() throw(InitException) {
  MEBase::doinit();
}

inline void ME2to2Base::dofinish() {
  MEBase::dofinish();
}

inline void ME2to2Base::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  MEBase::rebind(trans);
}

inline IVector ME2to2Base::getReferences() {
  IVector ret = MEBase::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
