// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the StandardModelBase class.
//

namespace ThePEG {

inline unsigned int StandardModelBase::families() const {
  return theFamilies;
}

inline double StandardModelBase::alphaEM() const {
  return theAlphaEM;
}

inline double StandardModelBase::alphaEM(Energy2 scale) const {
  return theRunningAlphaEM->value(scale, *this);
}

inline StandardModelBase::tAEMPtr StandardModelBase::alphaEMPtr() const {
  return theRunningAlphaEM;
}

inline double StandardModelBase::sin2ThetaW() const {
  return theSin2ThetaW;
}

inline double StandardModelBase::enu() const {
  return theEnu;
}

inline double StandardModelBase::ee() const {
  return theEe;
}

inline double StandardModelBase::eu() const {
  return theEu;
}

inline double StandardModelBase::ed() const {
  return theEd;
}

inline double StandardModelBase::vnu() const {
  return theVnu;
}

inline double StandardModelBase::ve() const {
  return theVe;
}

inline double StandardModelBase::vu() const {
  return theVu;
}

inline double StandardModelBase::vd() const {
  return theVd;
}

inline double StandardModelBase::anu() const {
  return theAnu;
}

inline double StandardModelBase::ae() const {
  return theAe;
}

inline double StandardModelBase::au() const {
  return theAu;
}

inline double StandardModelBase::ad() const {
  return theAd;
}

inline double StandardModelBase::CKM(unsigned int uFamily,
				     unsigned int dFamily) const {
  if ( uFamily >= theCKM2Matrix.size() ) return 0.0;
  const vector<double> & row = theCKM2Matrix[uFamily];
  if ( dFamily >= row.size() ) return 0.0;
  return row[dFamily];
}

inline unsigned int StandardModelBase::Nc() const {
  return theNc;
}

inline unsigned int StandardModelBase::Nf(Energy2 scale) const {
  return theRunningAlphaS->Nf(scale);
}

inline double StandardModelBase::alphaS() const {
  return theAlphaS;
}

inline double StandardModelBase::alphaS(Energy2 scale) const {
  return theRunningAlphaS->value(scale, *this);
}

inline StandardModelBase::tASPtr StandardModelBase::alphaSPtr() const {
  return theRunningAlphaS;
}

inline Energy StandardModelBase::LambdaQCD(unsigned int nflav) const {
  return theRunningAlphaS->LambdaQCD(nflav);
}

inline Energy StandardModelBase::LambdaQCD(Energy2 scale) const {
  return LambdaQCD(Nf(scale));
}

inline void StandardModelBase::doupdate() throw(UpdateException) {
  Interfaced::doupdate();
}

inline void StandardModelBase::dofinish() {
  Interfaced::dofinish();
}

inline void StandardModelBase::rebind(const TranslationMap & trans)
  throw(RebindException) {
  Interfaced::rebind(trans);
}

inline IVector StandardModelBase::getReferences() {
  IVector ret = Interfaced::getReferences();
  //  ret.push_back(dummy);
  return ret;
}

}

